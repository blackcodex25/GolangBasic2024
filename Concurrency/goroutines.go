package main

import (
	f "fmt"
	"time"
)

/* Goroutine ในภาษา Go
Goroutine เป็น thread ที่มีน้ำหนักเบา (lightweight)
ซึ่งจัดการโดย Go runtime การใช้งาน Goroutine
ทำให้สามารถรันฟังก์ชันแบบ concurrent (พร้อมกัน)
ได้อย่างมีประสิทธิภาพ
*/
/* การเริ่มต้น Goroutine
การเริ่มต้น Goroutine ทำได้ง่ายๆ โดยใช้คีย์เวร์ด go
ตามด้วยฟังก์ชันที่ต้องการรัน
go f(x, y, z)

การเรียกใช้ go f(x, y, z) จะทำให้ Goroutine
ใหม่ถูกสร้างขึ้นเพื่อรันฟังก์ชัน f(x, y, z) โดย

1.การประเมินค่า (evaluation):
f, x, y, และ z จะถูกประเมินผล (evaluated) ใน
Goroutine ปัจจุบัน

2.การรันฟังก์ชัน (execution)
ฟังก์ชัน f จะถูกรันใน Goroutine ใหม่
*/

/*การจัดการพื้นที่หน่วยความจำ
Goroutines ทำงานใน address space เดียวกัน ดังนั้ันการ
เข้าถึงหน่วยความจจำที่แชร์กัน (shared memory) ต้องถูก
ซิงโครไนซ์เพื่อป้องกัน race condition
*/

/* โค้ดนี้เป็นการสาธิตการใช้งาน Goroutine ในภาษา Go
โดยการสร้างฟังก์ชัน say() ที่พิมพ์ข้อความซ้ำหลายครั้งและการ
เรียกใช้ฟังก์ชันนี้ทั้งใน Goroutine และใน Goroutine หลัก
*/

/* นำเข้าแพ็กเกจ time เพื่อใช้สำหรับการ (Sleep)
ระหว่างการพิมพ์ข้อความ */
// ฟังก์ชัน say รับพารามิเตอร์เป็นสตริง s
func say(s string) {
	// วนลูป 5 ครั้ง และเพิ่มค่า i++ หลังจบลูปแต่ละรอบ
	for i := 0; i < 5; i++ {
		// ในแต่ละรอบจะสลีป (Sleep) เป็นเวลา 100 มิลลิวินาที
		time.Sleep(100 * time.Millisecond)
		// พิมพ์ข้อความ s
		f.Println(s)
	}
}

func main() {
	/* ฟังก์ชัน say() จะถูกรันใน Goroutine ใหม่
	ซึ่งเป็น thead ที่แยกจาก Goroutine หลัก	*/
	/* Goroutine ใหม่จะพิมพ์คำว่า "World" 5 ครั้ง
	โดยจะหยุดพัก 100 มิลลิวินาทีระหว่างแต่ละครั้ง
	*/
	go say("World")
	/* ฟังก์ชัน say() จะถูกรันใน Goroutine หลัก
	Goroutine หลักจะพิมพ์คำว่า "hello" 5 ครั้ง
	โดยจะหยุดพัก 100 มิลลิวินาทีระหว่างแต่ละครั้ง
	*/
	say("hello")
}

/* การทำงานพร้อมกันของ Goroutines
เนื่องจากการเรียกใช้ go say() จะสร้าง Goroutine ใหม่
ฟังก์ชัน say() ใน Goroutine หลักและ say()
ใน Goroutine ใหม่จะรันพร้อมกัน (concurrently)
การทำงานพร้อมกันนี้ทำให้การพิมพ์ข้อความ hello และ world
สามารถสลับกันได้ในผลลัพธ์ที่แสดงบนหน้าจอ
*/
/* สรุป
โค้ดนี้แสดงการใช้งาน Goroutine ในภาษา Go
เพื่อรันฟังก์ชัน say() พร้อมกันในสอง Goroutine
การรันฟังก์ชัน say() ใน Goroutine ใหม่
และใน Goroutine หลักทำให้ข้อความ hello และ world
ถูกพิมพ์ออกมาสลับกันตามลำดับการรันของ Goroutines ซึ่ง
แสดงให้เห็นถึงการทำงานแบบพร้อมกัน concurrent ในภาษา Go
*/
