package main

import (
	f "fmt"
)

/* โค้ดนี้เป็นตัวอย่างการใช้ Goroutines
และช่องสื่อสาร (Channel) ในภาษา Go
เพื่อแบ่งการทำงานระหว่าง Goroutines สองตัวในการคำนวณ
ผลรวมของตัวเลขใน slice หลังจากที่ Goroutines ทั้งสองตัว
คำนวณเสร็จสิ้นแล้ว โปรแกรมจะรวมผลลัพธ์สุดท้ายและพิมพ์ออกจอ
*/
/* ประกาศฟังก์ชัน sum กำหนดพารามิเตอร์ตัว s เป็น Slice ของ int
และ c เป็น Channel ของ int */
func sum(s []int, c chan int) {
	// ประกาศตัวแปร sum กำหนดค่า 0
	sum := 0
	// การใช้ for
	// เรียกใช้ Slice ชื่อ s ใช้ range เพื่อวนซ้ำผ่าน slice
	// ละค่าโดยใช้ _ และประกาศตัวแปร v เก็บค่า slice ตัวแปร s
	for _, v := range s {
		// ถ้าใช่ กำหนด sum + v = sum
		sum += v
	}

	c <- sum // ถ้าไม่ใช่ ส่งผลรวมไปยัง Channel ตัวแปร c

	/* ฟังก์ชันนี้คำนวณผลรวมของตัวเลขใน slice ชื่อตัวแปร s
	แล้วส่งผลรวมไปยัง Channel ชื่อตัวแปร c
	*/
}
func main() {
	// สร้าง Slice ชื่อตัวแปร s กำหนดค่าตัวเลข
	s := []int{7, 2, 8, -9, 4, 0}

	// สร้าง Channel ชื่อตัวแปร c สำหรับส่งค่า int
	c := make(chan int)
	/* สร้าง Goroutine สองตัวเพื่อคำนวณผลรวม
	ของตัวเลขใน slice */
	// Goroutine แรกคำนวณผลรวมของครึ่งแรกของ slice
	go sum(s[:len(s)/2], c)
	// Goroutine ที่สองคำนวณผลรวมของครึ่งหลังของ slice
	go sum(s[len(s)/2:], c)
	// รับค่าผลรวมจาก Goroutines ทั้งสองผ่าน
	// Channel ชื่อตัวแปร c และเก็บไว้ในตัวแปร x และ y
	x, y := <-c, <-c // x, y รับค่าจาก Channel c
	/* พิมพ์ผลรวมที่ได้รับจาก Goroutines
	ทั้งสองและผลรวมสุดท้าย */
	f.Println(x, y, x+y)
}

/* สรุป
โค้ดนี้แสดงการใช้งาน Goroutines และ channel ในภาษา Go
เพื่อแบ่งการทำงานคำนวณผลรวมของตัวเลขใน slice ให้กับ
Goroutines สองตัว หลังจากที่ Goroutines ทั้งสองตัวคำนวณ
เสร็จสิ้นแล้ว
โปรแกรมจะรับค่าผลลัพธ์ผ่าน channel และรวมผลลัพธ์สุดท้าย
แล้วพิมพ์ออกจอภาะ การแบ่งการทำงานแบบนี้ช่วยเพิ่มประสิทธิภาพ
และการทำงานแบบพร้อมกัน (Concurrent) ของโปรแกรม
*/

/*การทำงานของโปรแกรม
1.การแบ่งงานให้กับ Goroutines
s := []int{7,2,8,-9,4,0}
c := make(chan int)
go sum(s[:len(s)/2],c)
go sum(s[len(s)/2:],c)
สร้าง slice ชื่อตัวแปร s ที่มีค่าตัวเลข
สร้าง channel ชื่อตัวแปร c สำหรับส่งค่า int
สร้าง Goroutine สองตัวเพื่อคำนวณผลรวมของตัวเลขใน slice
Goroutine แรกคำนวณผลรวมของครึ่งแรกของ slice
(s[:len(s)/2])
Goroutine ที่สองคำนวณผลรวมของครึ่งหลังของ slice
(s[(len(s)/2:])

2.การรับค่าจาก channel
x, y := <-c, <-c
รอรับค่าผลรวมจาก Goroutines ทั้งสองผ่าน Channel ตัวแปร c
เก็บค่าผลรวมที่ได้รับในตัวแปร x และ y

3.การพิมพ์ผลลัพธ์
f.Println(x, y, x+y)
พิมพ์ผลรวมที่ได้รับจาก Goroutines ทั้งสอง (x และ y)
พิมพ์ผลรวมสุดท้าย (x + y)
*/
/* การใช้ _ ใน Go เป็นวิธีการที่จะระบุว่าค่าที่ได้จากการวนลูปหรือฟังก์ชันไม่จำเป็นต้อง
ถูกนำไปใช้งาน โดยการละทิ้งค่าที่ไม่ต้องการ
ตััวอย่างในโค้ดนี้ _ ถูกใช้ในการวนลูป for เพื่อระบุว่าค่า index
ที่ได้จาก range ไม่ถูกนำมาใช้จริงๆ
แต่เราต้องการค่าของ v เท่านั้น
โค้ดเดิม:
for _, v := range s {
	sum += v
}
ในโค้ดนี้ _ หมายถึงการละทิ้งค่า index และ v หมายถึงค่าที่อยู่
ใน slice ชื่อตัวแปร s ที่เราต้องการ รวมเข้าด้วยกัน

ถ้าเราลบ _ ออก และเปลี่ยนโค้ดเป็น:
for v := range s {
	sum += v
}
ผลลัพธ์จะเปลี่ยนแปลงเพราะ v ในการใช้งานนี้จะหมายถึง index
ของ slice ตัวแปร s ไม่ใช่ค่าของแต่ละองค์ประกอบใน
slice ตัวแปร s ซึ่งหมายความว่าการ รวมผลลัพธ์
จะรวม index ของ slice แทนที่จะเป็นค่าขององค์ประกอบ
ใน slice
		สรุป การใช้สัญลักษณ์ _ ใน for
การละทิ้งค่าด้วย _ ในการวนลูป for มีความสำคัญในการทำให้
โค้ดทำงานตามที่ตั้งใจไว้ ถ้าลบ _ ออก v จะกลายเป็น index
ของ slice แทนที่จะเป็นค่าของแต่ละองค์ประกอบ
ทำให้ผลลัพธ์ที่ได้เปลี่ยนไปจากเดิม

*/
