package main

import (
	f "fmt"
)

/*
*การแทรกโหนดลงในต้นไม้ทวิภาค
เมื่อแทรกโหนดลงในต้นไม้ทวิภาค สิ่งสำคัญที่ต้องจำคือโหนดทั้งหมด
ทางซ้ายของโหนดมีค่าที่เล็กกว่า ในขณะที่โหนดทั้งหมดทางขวามี
ค่าที่ใหญ่กว่า
*/
// ตัวอย่างโค้ดการแทรกโหนดในต้นไม้ทวิภาคในภาษา Go

/*
	ประกาศโครงสร้าง TreeNode ที่แทนค่าโหนดในต้นไม้ทวิภาค

ฟิลด์ของ TreeNode
*/
type TreeNode struct {
	Value int       // ค่าที่เก็บในโหนด (ชนิด int)
	Left  *TreeNode // พอยน์เตอร์ไปยังโหนดลูกซ้าย (ชนิด *TreeNode)
	Right *TreeNode // พอยน์เตอร์ไปยังโหนดลูกขวา (ชนิด *TreeNode)
}

// insert แทรกโหนดใหม่ที่มีค่าที่กำหนดลงในแผนผังไบนารี
/* ประกาศฟังก์ชัน Insert ใช้สำหรับแทรกโหนดใหม่ที่
มีค่าที่กำหนดลงในต้นไม้ทวิภาค */
func (n *TreeNode) Insert(value int) {
	/*ฟังก์ชันนี้ใช้การเปรียบเทียบค่า (value) กับค่าในโหนดปัจจุบัน (n.Value)
	เพื่อกำหนดว่าจะต้องแทรกโหนดใหม่ที่ตำแหน่งใด
	*/
	if n == nil {
		return
	} else if value <= n.Value { // ถ้าค่า value น้อยกว่าหรือเท่ากับค่าในโหนดปัจจุบัน n.Value
		// ถ้าโหนดลูกซ้าย (n.Left) เป็น nil
		if n.Left == nil {
			// แทรกโหนดใหม่ที่ตำแหน่งนี้ (n.Left)
			n.Left = &TreeNode{Value: value}
		} else { // ถ้าโหนดลูกซ้ายไม่เป็น nil
			// เรียกใช้ฟังก์ชัน Insert() ซ้ำกับโหนดลูกซ้าย
			n.Left.Insert(value)
		}

	} else { // ถ้าค่า value มากกว่าค่าในโหนดปัจจุบัน
		if n.Right == nil { // ถ้าโหนดลูกขวา (n.Right) เป็น nil
			// แทรกโหนดใหม่ที่ตำแหน่งนี้
			n.Right = &TreeNode{Value: value}
		} else { // ถ้าโหนดลูกขวาไม่เป็น nil
			// เรียกใช้ฟังก์ชัน Insert ซ้ำกับโหนดลูกขวา
			n.Right.Insert(value)
		}
	}
}

func main() {
	// สร้างโหนดราก (root) ที่มีค่า 10
	root := &TreeNode{Value: 0}
	/* แทรกโหนดใหม่ที่มีค่าต่างๆ (5, 15, 3, 7, 13, 17)
	ลงในต้นไม้ทวิภาค
	*/
	root.Insert(5)
	root.Insert(15)
	root.Insert(3)
	root.Insert(7)
	root.Insert(13)
	root.Insert(17)
	/* พิมพ์ค่าของโหนดรากและลูกทางซ้ายและลูกทางขวาของ
	โหนดราก
	*/
	f.Println("ค่าราก: ", root.Value)
	f.Println("ลูกทางซ้ายของราก: ", root.Left.Value)
	f.Println("ลูกทางขวาของราก: ", root.Right.Value)
}

/* การทำงานของโปรแกรม
1.การสร้างโหนดราก (root)
root := &TreeNode{Value: 10}
สร้างโหนดรากที่มีค่า 10

2.การแทรกโหนดใหม่
root.Insert(5)
root.Insert(15)
root.Insert(3)
root.Insert(7)
root.Insert(13)
root.Insert(17)
แทรกโหนดใหม่ที่มีค่าต่างๆ ลงในต้นไม้ทวิภาคตามหลักการ:
โหนดทางซ้ายของโหนดปัจจุบันมีค่าที่น้อยกว่า
โหนดทางขวาของโหนดปัจจุบันมีค่าที่มากกว่า

3.การพิมพ์ค่าของโหนดรากและลูกของโหนดราก:
f.Println("ค่าราก: ", root.Value)
f.Println("ลูกทางซ้ายของราก: ", root.Left.Value)
f.Println("ลูกทางขวาของราก: ", root.Right.Value)
พิมพ์ค่าของโหนดราก (10)
พิมพ์ค่าของลูกทางซ้ายของโหนดราก (5)
พิมพ์ค่าของลูกทางขวาของโหนดราก (15)
*/
/* สรุป
โค้ดนี้แสดงการสร้างและการแทรกโหนดลงในต้นไม้ทวิภาค
(binary tree) ในภาษา Go โดยใช้โครงสร้าง TreeNode และ
ฟังก์ชัน Insert() การแทรกโหนดในต้นไม้ทวิภาคจะรักษาลำดับ
ของโหนด โดยโหนดที่มีค่าต่ำกว่าจะอยู่ทางซ้ายและโหนดที่มีค่า
สูงกว่าจะอยู่ทางขวา การใช้ฟังก์ชัน Insert() ช่วยให้การแทรก
โหนดเป็นไปอย่างง่ายดายและมีประสิทธิภาพ
*/
