package main

import (
	f "fmt"
)

/*
*การสร้างต้นไม้ทวิภาคในภาษา Go
ในการสร้างต้นไม้ทวิภาคในภาษา Go เราจะเริ่มต้นด้วยการกำหนด
struct ที่เป็นตัวแทนของโหนดในต้นไม้ แต่ละโหนด
จะมีค่าจำนวนเต็มและมีลูกสองโหนด
ตัวอย่างการกำหนด struct สำหรับโหนดในต้นไม้ทวิภาค
*/
/* โครงสร้าง TreeNode ประกอบด้วยสามฟิลด์
1 Value:
ชนิดข้อมูล: int
เก็บค่าของโหนดในต้นไม้
2.Left:
ชนิดข้อมูล: *TreeNode (พอยน์เตอร์ไปยังโหนดลูกซ้าย)
ใช้สำหรับเก็บที่อยู่ของโหนดลูกซ้าย
3.Right:
ชนิดข้อมูล: *TreeNode (พอยน์เตอร์ไปยังโหนดลูกขวา)
ใช้สำหรับเก็บที่อยู่ของโหนดลูกขวา
*/
type TreeNode struct {
	Value int
	Left  *TreeNode
	Right *TreeNode
}

func main() {
	// สร้างโครงสร้างต้นไม้ไบนารี
	/*
		*1.โหนดราก(root):
		มีค่า 1
		มีลูกซ้ายและลูกขวา
	*/
	root := &TreeNode{
		Value: 1,
		/*
			*2.ลูกซ้ายของโหนดราก:
			มีค่า 2
			มีลูกซ้ายที่มีค่า 4
			มีลูกขวาที่มีค่า 5
		*/
		Left: &TreeNode{
			Value: 2,
			Left: &TreeNode{
				Value: 4,
			},
			Right: &TreeNode{
				Value: 5,
			},
		},
		/*
			*3.ลูกขวาของโหนดราก:
			มีค่า 3
			มีลูกซ้ายที่มีค่า 6
			มีลูกขวาที่มีค่า 7
		*/
		Right: &TreeNode{
			Value: 3,
			Left: &TreeNode{
				Value: 6,
			},
			Right: &TreeNode{
				Value: 7,
			},
		},
	}
	// พิมพ์ค่าของโหนดรากและโหนดลูกซ้ายและลูกขวาของโหนดราก
	f.Println("ค่าราก: ", root.Value)
	f.Println("ลูกทางซ้ายของราก: ", root.Left.Value)
	f.Println("ลูกทางขวาของราก: ", root.Right.Value)
}

/*ในตัวอย่างนี้
เราได้กำหนด struct ชื่อ treeNode ที่มีฟิลด์ Value, Left, และ Right
Value เป็นค่าจำนวนเต็มที่เก็บค่าในโหนด
Left และ Right เป็นพอยน์เตอร์ไปยัง TreeNode อื่นๆ ซึ่ง
เป็นลูกทางซ้ายและขวาของโหนด
ในฟังก์ชัน main เราได้สร้างต้นไม้ทวิภาคด้วยตนเองโดย กำหนดค่าต่างๆ
ให้กับโหนดและเชื่อมโยงพวกมันเข้าด้วยกัน

โค้ดนี้สร้างต้นไม้ทวิภาคที่มีโหนดรากเป็น 1 และมีลูกทางซ้ายและขวา
เป็น 2 และ 3 ตามลำดับ พร้อมทั้งมีลูกของโหนดเหล่านี้ด้วย
*/
/* สรุป
โค้ดนี้สร้างโครงสร้างข้อมูลต้นไม้ไบนารี (Binary Tree) โดยใช้
โครงสร้างข้อมูล (Struct) ในภาษา Go โครงสร้าง TreeNode ใช้
ในการแทนค่าโหนดในต้นไม้ โดยมีฟิลด์สำหรับค่าของโหนดและ
พอยน์เตอร์ไปยังโหนดลูกซ้ายและลูกขวา ฟังก์ชัน main ใช้สำหรับ
สร้างต้นไม้ไบนารีและพิมพ์ค่าของโหนดบางตัวออกทางหน้าจอ โค้ดนี้
แสดงวิธีการสร้างและการเข้าถึงโหนดในต้นไม้ไบนารีได้อย่างชัดเจน
*/
