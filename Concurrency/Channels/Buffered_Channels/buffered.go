package main

import (
	f "fmt"
)

/* ช่อง (Channels) สามารถมีบัฟเฟอร์ได้
โดยให้ความยาวของบัฟเฟอร์ เป็นอากิวเมนต์ที่สองในการใช้ make()
เพื่อเริ่มต้น channels ที่มีบัฟเฟอร์

ch := make(chan int, 100)

การส่งไปยังช่องที่มีบัฟเฟอร์จะบล็อกเฉพาะเมื่อบัฟเฟอร์เต็ม
การรับจะบล็อกเมื่อบัฟเฟอร์ว่าง
ปรับเปลี่ยนตัวอย่างเพื่อเติมบัฟเฟอร์จนเกินและดูว่าจะเกิดอะไรขึ้น
*/
/*
โค้ดนี้เป็นตัวอย่างการใช้งานช่องสื่อสาร (channel) แบบบัฟเฟอร์ใน
ภาษา Go เพื่อส่งและรับข้อมูลระหว่าง Goroutines
หรือใน Goroutine เดียวกันโดยไม่ต้องใช้การซิงโครไนซ์เพิ่มเติม
โค้ดนี้แสดงการสร้างช่องสื่อสารที่มีบัฟเฟอร์ขนาด 2 และการส่งข้อมูล
เข้าและรับข้อมูลออกจากช่องสื่อสาร (Channels) นั้น
*/
/* การสร้าง Channels ที่มีบัฟเฟอร์ขนาด 2 และการส่งข้อมูลเข้า
และรับข้อมูลออกจากช่องสื่อสารนั้น */
func main() {
	// สร้าง Channels แบบบัฟเฟอร์ขนาด 2
	ch := make(chan int, 2)
	// ส่งค่า 1 เข้าไปใน Channels
	ch <- 1
	// ส่งค่า 2 เข้าไปใน Channels
	ch <- 2
	// รับและพิมพ์ค่าจาก Channels (ค่า 1)
	f.Println(<-ch)
	// รับและพิมพ์ค่าจาก Channels (ค่า 2)
	f.Println(<-ch)
}

/* การทำงานของโค้ด
1.การสร้าง Channels แบบบัฟเฟอร์
ch := make(chan int, 2)
สร้างช่องสื่อสาร ch ที่มีบัฟเฟอร์ขนาด 2 ซึ่งสามารถเก็บข้อมูล int
ได้สูงสุด 2 ค่าในเวลาเดียวกัน

2.การส่งข้อมูลเข้าไปในช่องสื่อสาร
ch <- 1
ch <- 2
ส่งค่า 1 เข้าไปใน channels ชื่อตัวแปร ch
ส่งค่า 2 เข้าไปใน channels ชื่อตัวแปร ch
เนื่องจาก channels มีบัฟเฟอร์ขนาด 2 จึงสามารถเก็บค่าทั้งสอง
ได้โดยไม่บล็อก (ไม่ต้องรอการรับค่า)

3.การรับและพิมพ์ค่าจาก Channels
fmt.Println(<-ch)
fmt.Println(<-ch)
รับค่าแรกจาก channels ตัวแปร ch และพิมพ์ออกจอภาพ (ค่า 1)
รับค่าที่สองจาก channels ตัวแปร ch และพิมพ์ออกจอภาพ (ค่า 2)
*/
/* การทำงานแบบบัฟเฟอร์ของ Channels
Buffered Channels สามารถเก็บข้อมูล
ได้ตามขนาดของบัฟเฟอร์ที่กำหนด (ในที่นี้คือ 2)
การส่งข้อมูลเข้าไปใน Channels จะไม่บล็อก (ไม่ต้องรอการรับค่า)
จนกว่า Channels จะเต็ม
การรับข้อมูลจาก Channels จะไม่บล็อก (ไม่ต้องรอการส่งค่า)
จนกว่า Channels จะว่างเปล่า
*/
/* สรุป
โค้ดนี้แสดงการใช้งาน Buffered Channels ในภาษา Go โดยการ
สร้าง Channels ที่มี Buffered ขนาด 2 และการส่งและรับข้อมูล
และออกจาก Channels นั้น การใช้ Buffered Channels ช่วย
ให้สามารถส่งและรับข้อมูลระหว่าง Goroutines ได้อย่างมี
ประสิทธิภาพโดยไม่ต้องใช้การซิงโครไนซ์เพิ่มเติม
โค้ดนี้แสดงการส่งและรับค่าตัวเลข 1 และ 2 จาก Channels
และพิมพ์ค่าที่รับได้ออกจอภาพ
*/
