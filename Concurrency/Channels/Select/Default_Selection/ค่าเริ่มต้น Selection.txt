ในภาษา Go 
คำสั่ง select ใช้สำหรับการรอการทำงานของหลาย
ช่องสื่อสาร (Channels) พร้อมกัน โดยที่การทำงานจะเลือก case
ที่พร้อมทำงานก่อน ในกรณีที่ไม่มี case ใดพร้อมทำงาน
(ไม่มีการส่งหรือรับข้อมูลในช่องสื่อสารที่อยู่ใน case ต่างๆ)
เราสามารถใช้ default case เพื่อระบุการทำงานที่ไม่บล็อก 
(non-blocking) ได้

การใช้งาน select พร้อม default case
default case ใน select จะถูกเรียกใช้หากไม่มี case อื่นใดที่
พร้อมทำงานในขณะนั้น การใช้ default case ช่วยให้เราสามารถ
ลองส่งหรือรับข้อมูลจากช่องสื่อสารโดยไม่บล็อกการทำงานของโปรแกรม
ตัวอย่างโค้ด
select {
    case i := <-c:
    // ใช้ i ที่ได้รับจากช่องสื่อสาร c
    default:
    /* หากการรับข้อมูลจาก c จะบล็อกการทำงาน, 
    ให้ทำงานนี้แทน */
}
การทำงานของโค้ด
1.การรับค่าจากช่องสื่อสาร c:
case i := <-c:
    // ใช้ i ที่ได้รับจากช่องสื่อสาร c
หากมีค่าพร้อมในช่อง c ค่านั้นจะถูกรับและเก็บไว้ในตัวแปร i
โค้ดใน case นี้จะถูกดำเนินการ (ใช้ค่าของ i ที่ได้รับจาก
ช่อง c)

2.default case:
default:
// หากการรับข้อมูลจาก c จะบล็อกการทำงาน, ให้ทำงานนี้แทน
หากไม่มีค่าพร้อมในช่อง c และการรับค่าจะบล็อกการ
ทำงานของโปรแกรม, การทำงานจะถูกสลับไปที่ default 
case แทน
โค้ดใน default case จะถูกดำเนินการ
