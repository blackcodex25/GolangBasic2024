Anonymous Function คืออะไร?
Anonymous function หรือฟังก์ชันไร้ชื่อ เป็นฟังก์ชันที่ถูกประกาศ
และเรียกใช้งานโดยไม่มีชื่อกำกับ สามารถใช้ฟังก์ชันไร้ชื่อเหมือนกับ
ฟังก์ชันทั่วไปในภาษา Go ยกเว้นว่าไม่มีชื่อ ฟังก์ชันนี้มักถูกใช้ใน
สถานการณ์ที่ต้องการฟังก์ชันแบบชั่วคราวหรือในการส่งผ่านเป็น
พารามิเตอร์ให้กับฟังก์ชันอื่น

การทำงานของ Anonymous Function
anonymous function ในภาษา Go สามารถถูกกำหนดและใช้งาน
ได้ทันทีหลังจากประกาศ โดยไม่ต้องใช้ชื่อเรียก การประกาศฟังก์ชัน
นี้ทำได้ด้วยรูปแบบการเขียนที่เรียบง่าย

ตัวอย่างการประกาศและการใช้งาน
1.การประกาศและการเรียกใช้งานทันที
func() {
    fmt.Println("Hello, World")
}()
ฟังก์ชัน func() {fmt.Println("Hello, World")} 
ถูกประกาศและเรียกใช้งานทันที
วงเล็บเปิด-ปิด () ที่อยู่ท้ายฟังก์ชันหมายถึงการเรียกใช้งานฟังก์ชันนั้น

2.การใช้ Anonymous Function กับพารามิเตอร์
func(message string){
    fmt.Println(message)
}("Hello, Go!")
ฟังก์ชัน func(message string) { fmt.Println(message)}
ถูกประกาศและเรียกใช้งานทันทีพร้อมกับ
ส่งผ่านพารามิเตอร์ message เป็น "Hello, Go!"

3.การเก็บ Anonymous Function ในตัวแปร
greet := func(name string) {
    fmt.Printf("Hello, %s!\n", name)
}
greet("Alice")
greet("Martin")
ฟังก์ชัน func(name string) {fmt.Printf("Hello, %s!\n", name)}
ถูกเก็บในตัวแปร greet
สามารถเรียกใช้ฟังก์ชัน greet ได้หลายครั้งด้วยการส่งผ่านพารามิเตอร์
พารามิเตอร์ที่แตกต่างกัน

4.การใช้ Anonymous Function ภายในฟังก์ชันอื่น
numbers := []int{1,2,3,4,5}
sum := 0

func(nums []int) {
    for _, num := range nums {
        sum += num
    }(numbers)
    fmt.Println("Sum: ", sum)
}
ฟังก์ชัน func(nums []int) {...} ถูกใช้ภายในฟังก์ชัน main 
เพื่อคำนวณผลรวมของตัวเลขใน slice ตัวแปร numbers
ฟังก์ชันถูกเรียกใช้งานทันทีพร้อมกับส่งผ่านพารามิเตอร์ numbers

    สรุป
Anonymous Function เป็นฟังก์ชันไร้ชื่อที่สามารถประกาศและ
เรียกใช้งานได้ทันทีหลังจากประกาศ ฟังก์ชันนี้มีประโยชน์ในสถานการณ์ที่
ต้องการฟังก์ชันแบบชั่วคราวหรือในการส่งผ่านเป็นพารามิเตอร์ให้กับฟังก์ชันอื่น
การใช้งาน Anonymous Function ทำให้โค้ดสั้นลงและสามารถทำให้โค้ด
เข้าใจได้ง่ายขึ้นเมื่อใช้อย่างถูกต้อง