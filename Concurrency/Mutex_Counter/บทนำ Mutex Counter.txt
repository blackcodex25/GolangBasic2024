Mutex ในภาษา Go
data structures ที่อยู่ใน sync package มันช่วยให้เราสามารถ
ล็อกและปลดล็อคข้อมูลเพื่อไม่ได้ให้เกิดความเสียหายจากการเข้าถึง
ข้อมูลพร้อมกัน เช่น การอ่านและเขียนในเวลาเดียวกันของคนละ
ฟังก์ชัน ข้อมูลที่ได้อาจผิดพลาด

1.โครงสร้าง Mutex
type mutex struct {
    // ประกอบด้วยฟิลด์หรือฟิลด์ที่ไม่ได้ถูกส่งออก
}
Mutex เป็นโครงสร้างที่ใช้ในการจัดการกับ (Mutual Exclusion Lock) 
หรือการล็อกเพื่อป้องกันไม่ให้หลายๆ goroutine เข้าถึงทรัพยากรพร้อมกัน
ค่าดั้งเดิม (zero value) ของ mutex จะเป็น mutex ที่ไม่ถูกล็อก
โครงสร้างของ Mutex มีฟิลด์ที่ไม่ได้เปิดเผย(unexported fields)
ซึ่งหมายความว่าเราไม่สามารถเข้าถึงหรือปรับเปลี่ยนฟิลด์เหล่านั้ันได้
โดยตรง

2.ข้อควรระวัง
Mutex ต้องไม่ถูกคัดลอกหลังจากที่ถูกใช้งานครั้งแรก เมื่อเราใช้ Mutex
ในการล็อกและปลดล็อก การคัดลอก Mutex จะทำให้เกิดปัญหาในเรื่องของการ
ซิงโครไนซ์และความปลอดภัยของข้อมูล

3.การทำงานของ Unlock และ Lock
ในโมเดลหน่วยความจำของ Go
คำสั่ง Unlock ครั้งที่ n จะต้องเกิดขึ้นก่อน (Synchronizes before) 
คำสั่ง Lock ครั้งที่ m สำหรับทุก n < m

แต่ถ้าการเรียกใช้ TryLock ไม่สำเร็จ จะไม่มีการสร้าง
ความสัมพันธ์ Synchronizes before ใดๆ

4.ฟังก์ชัน Lock
func (m *Mutex) Lock()
ฟังก์ชัน Lock ใช้ในการล็อก Mutex
ถ้า Mutex ถูกล็อกอยู่แล้ว goroutine ที่เรียกใช้ฟังก์ชันนี้จะถูก
บล็อกจนกว่า Mutex จะสามารถใช้งานได้ (หมายความว่าต้องรอจนกว่า Mutex
จะถูกปลดล็อกโดย goroutine อื่นก่อน)

5.ฟังก์ชัน Unlock 
func (m *Mutex) Unlock()
ฟังก์ชัน Unlock ใช้ในการปลดล็อก Mutex
ถ้า Mutex ไม่ได้ถูกล็อกก่อนหน้านี้ การเรียกใช้ Unlock จะทำให้เกิดข้อผิดพลาด
ในขณะทำงาน (run-time error)
Mutex ที่ถูกล็อกนั้นไม่จำเป็นต้องถูกเชื่อมโยงกับ goroutine ใดๆโดยเฉพาะ ดังนั้น
Goroutine หนึ่งสามารถล็อก Mutex แล้วให้ Goroutine อื่นมาปลดล็อกได้

6.สรุปการทำงาน
Mutex ใน Go เป็นเครื่องมือสำหรับการจัดการ Mutual Exclusion ซึ่งเป็นการล็อกเพื่อให้มั่นใจ
ว่ามีเพียง groutine เดียวที่สามารถเข้าถึงทรัพยากรที่ใช้ร่วมกันได้ในเวลาเดียวกัน

การใช้ Mutex ช่วยป้องกันปัญหาการแข่งขันของข้อมูล (data race) โดยการล็อกทรัพยากร
เมื่อมีการเข้าถึงและปลดล็อกหลังจากใช้งานเสร็จสิ้น

Mutex ต้องถูกใช้อย่างระมัดระวังเพื่อไม่ให้เกิดข้อผิดพลาด เช่น การปลดล็อก Mutex ที่ไม่ได้
ถูกล็อก หรือการคัดลอก Mutex หลังจากที่เริ่มใช้งานแล้ว

การเข้าใจการทำงานของ Mutex เป็นสิ่งสำคัญในการพัฒนา
โปแกรมที่มีการทำงานพร้อมกัน (Concurrent Programming) ใน Go 
อย่างมีประสิทธิภาพและปลอดภัย