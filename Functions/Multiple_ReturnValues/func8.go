package main

import (
	f "fmt"
)

//การคืนค่าหลายค่าจากฟังก์ชันในภาษา Go
/*การคืนค่าหลายค่าในภาษา Go ฟังก์ชันสามารถคืนค่าหลายค่าได้
ทำให้สามารถส่งคืนผลลัพธ์ที่หลากหลายจากฟังก์ชันเดียวได้
*/
/*โค้ดตัวอย่างนี้ ฟังก์ชัน myFunction จะคืนค่าเป็นจำนวนเต็ม (int)
และข้อความ (string)
*/

// การสร้างฟังก์ชัน (Function Creation)
// ประกาศฟังก์ชัน myFunction() กำหนดพารามิเตอร์ x ชนิดข้อมูล int และ y ชนิดข้อมูล string
// กำหนดพารามิเตอร์คืนค่า result ชนิดข้อมูล int และ พารามิเตอร์คืนค่าตัวที่สองชื่อ txt1 ชนิดข้อมูล string
func myFunction(x int, y string) (result int, txt1 string) {
	result = x + x     //เรียกใช้ฟังก์ชันคืนค่าชื่อ result รับคืนค่าผลรวม x + x
	txt1 = y + " Dev!" //เรียกใช้งานฟังก์ชันคืนค่าชื่อ txt1 รับคืนค่าการต่อข้อความ y + "Dev!"
	return             //ประกาศฟังก์ชัน return ไม่ระบุตัวแปรค่าที่จะคืน จะคืนค่าทั้ง result และ txt1 ออกไปให้ฟังก์ชัน
}

// การเรียกใช้ฟังก์ชัน (Function Call)
func main() {
	//เรียกใช้ฟังก์ชัน myFunction() กำหนดอากิวเมนต์เป็นตัวเลข 5 และเป็นข้อความ "Hi" ส่งค่าออกไป
	f.Println(myFunction(5, "Hi")) //ผลลัพธ์ที่คืนจาก myFunction จะถูกพิพม์ออกมาโดยใช้ Println()
	//ผลลัพธ์ 10 Hi Dev!
}

/*อธิบายโค้ด
- ฟังก์ชัน myFunction รับค่าพารามิเตอร์สองค่า คือ x (ชนิด int) และ y (ชนิด string)
- ฟังก์ชันนี้คืนค่าผลลัพธ์สองค่า คือ result (ชนิด int) และ txt1 (ชนิด string)
- ในฟังก์ชันนี้ result ถูกตั้งค่าเป็นผลรวมของ x + x และ "Dev"
- การใช้ return แบบไม่ระบุค่าที่จะคืน (naked return)
จะคืนค่าทัั้ง result และ txt1 ออกไป

- ในฟังก์ชัน main เราเรียกใช้ myFunction โดยส่งค่า 5 และ "Hi" เป็นอากิวเมนต์
- ผลลัพธ์ที่คืนจาก myFunction จะถูกพิมพ์ออกมาโดยใช้ f.Println()
- 10 Hi Dev!
*/
/*ประโยชน์ของการคืนค่าหลายค่า
1.ช่วยให้ฟังก์ชันสามารถส่งคืนข้อมูลหลายประเภทได้โดยไม่ต้องใช้โครงสร้างข้อมูลที่ซับซ้อน
2.ทำให้การออกแบบฟังก์ชันยืดหยุ่นและสะดวกยิ่งขึ้น
3.ช่วยในการจัดการข้อผิดพลาดได้ดีขึ้น โดยสามารถคืนค่าผลลัพธ์และข้อผิดพลาดออกมาพร้อมกัน

	สรุป
การคืนค่าหลายค่าใน Go นั้นเป็นคุณสมบัติที่ทรงพลังที่ช่วยให้การเขียนโค้ด
มีประสิทธิภาพและยืดหยุ่นมากขึ้น
*/
