package main

import (
	f "fmt"
)

/*ฟังก์ชันแบบเรียกซ้ำ (Recursion Functions) ในภาษา Go
การเรียกซ้ำเป็นแนวคิดทางคณิตศาสตร์และการเขียนโปรแกรมที่ใช้กันอย่างแพร่หลาย
ข้อดีคือสามารถวนลูปผ่านข้อมูลเพื่อให้ได้ผลลัพธ์ อย่างไรก็ตาม นักพัฒนาต้องระมัดระวัง
เมื่อใช้ฟังก์ชันเรียกซ้ำ เนื่องจากอาจเขียนฟังก์ชันที่ไม่เคยสิ้นสุด หรือฟังก์ชันที่ใช้หน่วยความจำหรือ
พลังงานประมวลผลมากเกินไปได้ง่าย อย่างไรก็ตาม เมื่อเขียนอย่างถูกต้อง การเรียกซ้ำอาจเป็นวิธีการที่มี
ประสิทธิภาพและมีความสง่างามทางคณิตศาสตร์ในการเขียนโปรแกรม
*/
/*โค้ดตัวอย่างการคำนวนแฟคทอเรียลแบบเรียกซ้ำ
ฟังก์ชัน factorial_recursion() เป็นฟังก์ชันที่เรียกใช้ตัวมันเอง เราใช้ตัวแปร x เป็นข้อมูล
ซึ่งจะลดค่าลงทีละ 1 ทุกครั้งที่เรียกซ้ำ การเรียกซ้ำจะสิ้นสุดเมื่อเงื่อนไขไม่มากกว่า 0 (คือ เมื่อ x เท่ากับ 0)
*/
//ประกาศฟังก์ชันชื่อ factorial_recursion ที่รับพารามิเตอร์ x ชนิดข้อมูล float64 และคืนค่าผลลัพธ์ y ชนิดข้อมูล float64
func factorial_recursion(x float64) (y float64) {
	// x มากกว่า 0 จริงหรือไม่
	if x > 0 {
		// ถ้า x มากกว่า 0 ให้คำนวณค่าแฟคทอเรียลแบบเรียกซ้ำ
		y = x * factorial_recursion(x-1) // ถ้า x มากกว่า 0, ให้ค่า y เท่ากับ x คูณกับผลลัพธ์ของการเรียกใช้ factorial_recursion(x-1)
	} else { // ถ้า x ไม่มากกว่าหรือเท่ากับ 0
		y = 1 // กำหนดค่า y เท่ากับ 1
	}
	return //คืนค่าผลลัพธ์ y
}
func main() {
	// ประกาศฟังก์ชัน Println() และเรียกใช้งานฟังก์ชัน factorial_recursion()
	// โดยส่งค่า 4 เข้าไป พิมพ์ผลลัพธ์ที่ได้ออกมา ซึ่งคือ 24
	f.Println(factorial_recursion(4)) // x มีค่าเท่ากับ 4
}

/*อธิบายโค้ด
ฟังก์ชัน factorial_recursion รับพารามิเตอร์ x ที่มี
ชนิดเป็น float64 และคืนค่าผลลัพธ์ y ที่มีชนิดเป็น float64
ในฟังก์ชัน factorial_recursion มีการตรวจสอบเงื่อนไข if x > 0
- ถ้า x มากกว่า 0 ฟังก์ชันจะคำนวณค่า y โดยใช้สูตร x * factorial_recursion(x-1)
ซึ่งเป็นการเรียกใช้ฟังก์ชันตัวเองโดยลดค่าของ x ลง 1
- ถ้า x ไม่มากกว่า 0 ฟังก์ชันจะตั้งค่า y เป็น 1
ผลลัพธ์สุดท้ายจะถูกคืนค่าผ่านการใช้คำสั่ง return
ในฟังก์ชัน main จะเรียกใช้ฟังก์ชัน factorial_recursion โดย
ส่งค่า 4 และพิมพ์ผลลัพธ์ที่ได้ออกมา
*/

/* การคำนวณ y = x * factorial_recursion(x-1) ในฟังก์ชัน factorial_recursion
คือการเรียกฟังก์ชันตัวเองซ้ำๆ จนกว่าจะถึงจุดหยุด (base case) ซึ่งจะคำนวณค่าแฟคทอเรียลแบบเรียกซ้ำ (recursion)
โดยมีการนวณค่าแฟคทอเรียลแบบเรียกซ้ำ (recursion) โดยมีการคำนวณตามขั้นตอน
ตัวอย่างการคำนวณค่าแฟคทอเรียลของ 4
1. เมื่อ x = 4
ฟังก์ชัน factorial_recursion(4) ถูกเรียก
เนื่องจาก 4 > 0 เงื่อนไข if จะเป็นจริง
ดังนั้น y = 4 * factorial_recursion(3)

2. เมื่อ x = 3
ฟังก์ชัน factorial_recursion(3) ถูกเรียก
เนื่องจาก 3 > 0 เงื่อนไข if จะเป็นจริง
ดังนั้น y = 3 * factorial_recursion(2)

3. เมื่อ x = 2
ฟังก์ชัน factorial_recursion(2) ถูกเรียก
เนื่องจาก 2 > 0 เงื่อนไข if จะเป็นจริง
ดังนั้น y = 2 * factorial_recursion(1)

4. เมื่อ x = 1
ฟังก์ชัน factorial_recursion(1) ถูกเรียก
เนื่องจาก 1 > 0 เงื่อนไข if จะเป็นจริง
ดังนั้น y = 1 * factorial_recursion(0)

5. เมื่อ x = 0
ฟังก์ชัน factorial_recursion(0) ถูกเรียก
เนื่องจาก 0 <= 0 เงื่อนไข else จะเป็นจริง
ดังนั้น y = 1 และฟังก์ชันจะหยุดเรียกซ้ำ (recursion)
*/
/*สรุปการคำนวณ
factorial_recursion(0) = 1
factorial_recursion(1) = 1 * 1 = 1
factorial_recursion(2) = 2 * 1 = 2
factorial_recursion(3) = 3 * 2 = 6
factorial_recursion(4) = 4 * 6 = 24
ดังนั้น เมื่อเราเรียก factorial_recursion(4) ผลลัพธ์จะเป็น 24 ตามที่
ได้คำนวณค่าแฟคทอเรียลของ 4 (4!)
*/
