package main

import (
	f "fmt"
)

/*---------เรื่องนี้มันเข้าใจยาก---------*/
/*ฟังก์ชันแบบเรียกซ้ำ (Recursion Functions) ในภาษา Go
ฟังก์ชันแบบเรียกซ้ำคือฟังก์ชันที่เรียกใช้ตัวมันเอง
โดยมีเงื่อนไขที่ทำให้หยุดการเรียกซ้ำ
*/
/*โค้ดตัวอย่าง ฟังก์ชัน testcount() จะเรียกใช้ตัวมันเองโดยใช้ตัวแปร x เป็นข้อมูล
ซึ่งจะเพิ่มค่าขึ้นทีละ 1 (x + 1) ทุกครั้งที่เรียกซ้ำ การเรียกซ้ำจะสิ้นสุดเมื่อค่าของ
x เท่ากับ 11 (x == 11)
*/
// ประกาศฟังก์ชันชื่อ testcount() รับค่าพารามิเตอร์ x ซึ่งเป็นจำนวนเต็ม (int) และคืนค่าจำนวนเต็ม (int)
func testcount(x int) int {
	if x == 11 { // ตรวจสอบว่าค่า x เท่ากับ 11 หรือไม่ ถ้าใช่จะหยุดการทำงานของฟังก์ชัน
		return 0 // ด้วยการคืนค่า 0
	}
	f.Println(x)            // พิมค่า x ออกจอภาพ
	return testcount(x + 1) // เรียกใช้ฟังก์ชัน testcount อีกครั้งโดยเพิ่มค่า x ขึ้น 1
	// ส่งค่ากลับเป็นผลลัพธ์ของฟังก์ชัน testcount(x + 1)
}
func main() {
	testcount(1) // เรียกใช้ฟังก์ชัน testcount โดยเริ่มต้นด้วยค่า 1 ส่งออกให้ฟังก์ชัน
}

/*- ฟังก์ชัน testcount จะรับค่าพารามิเตอร์ x ที่มีชนิดเป็น int
- ในฟังก์ชัน testcount จะมีเงื่อนไข if x == 11 เพื่อตรวจสอบว่าค่า x เท่ากับ 11 หรือไม่
ถ้าค่า x เท่ากับ 11 ฟังก์ชันจะหยุดการเรียกซ้ำโดยคืนค่า 0
ถ้า x ไม่เท่ากับ 11 ฟังก์ชันจะพิมพ์ค่า x และเรียกใช้ตัวมันเองอีกครั้ง โดยส่งค่า x + 1 เป็น
พารามิเตอร์
- ในฟังก์ชัน main จะเรียกใช้ฟังก์ชัน testcount โดยส่งค่าเริ่มต้นเป็น 1
- ผลลัพธ์ตากการรันโปรแกรมจะเป็นการพิมพ์ตัวเลขตั้งแต่ 1 ถึง 10
*/

/* หลักการของฟังก์ชันเรียกซ้ำ
1.เงื่อนไขการหยุด (Base Case): การเรียกซ้ำต้องมีเงื่อนไขที่ทำให้หยุดการเรียกซ้ำได้
ไม่เช่นนั้นจะเกิดการเรียกซ้ำไปเรื่อยๆ (infinite recursion) จนเกิดข้อผิดพลาดขึ้น
2.การเรียกวนซ้ำ (Recursive Call): ฟังก์ชันจะเรียกใช้ตัวมันเองโดยส่งพารามิเตอร์ใหม่
ให้กับการเรียกซ้ำครั้งต่อไป
*/

/*สรุป
การใช้ฟังก์ชันเรียกซ้ำสามารถทำให้โค้ดของเราสั้นลงและอ่านเข้าใจง่ายขึ้นเมื่อ
ใช้อย่างเหมาะสม โดยเฉพาะอย่างยิ่งกับปัญหาที่มีโครงสร้างแบบเรียกซ้ำ เช่น
การคำนวนค่าแฟคทอเรียลหรือ การเดินสำรวจในโครงสร้างแบบเรียกซ้ำ เช่น
การคำนวณค่าแฟคทอเรียลหรือการเดินสำรวจในโครงสร้างข้อมูลแบบต้นไม้
(tree traversal)
*/
