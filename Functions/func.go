package main

import (
	f "fmt"
)

/*ฟังก์ชันใน Go
ฟังก์ชันเป็นกลุ่มของคำสั่งที่สามารถนำมาใช้ซ้ำในโปรแกรมได้
ฟังก์ชันจะไม่ถูกดำเนินการโดยอัตโนมัติเมื่อหน้าโหลด แต่จะถูกดำเนินการ
โดยการเรียกฟังก์ชัน
*/
/* การสร้างฟังก์ชัน
ในการสร้าง (หรือประกาศ) ฟังก์ชันให้ทำตามขั้นตอนดังนี้
1. ใช้คีย์เวิร์ด func
2. กำหนดชื่อสำหรับฟังก์ชัน ตามด้วยวงเล็บ ()
3. เพิ่มโค้ดที่กำหนดว่าฟังก์ชันควรทำอะไรภายในวงเล็บปีกกา {}
*/
/* Syntax func functionName(){
	โค้ดที่จะถูกใช้ในการดำเนินการ
}
*/
/*การเรียกฟังก์ชัน
ฟังก์ชันจะไม่ถูกดำเนินการทันที แต่จะถูก "บันทึกไว้ใช้ในภายหลัง" และจะถูกดำเนิน
การเมื่อถูกเรียกใช้

ในโค้ดตัวอย่าง เราสร้างฟังก์ชันชื่อ myMessage() วงเล็บปีกกาเปิด { แสดงถึงการเริ่มต้นโค้ดของฟังก์ชัน
และวงเล็บ
ปีกกาปิด } แสดงถึงจุดสิ้นสุดของโค้ดฟังก์ชัน ฟังก์ชันนี้จะพิมพ์ข้อความ "i just got executed!"
เมื่อต้องการเรียกฟังก์ชันให้เขียนชื่อฟังก์ชันตามด้วยวงเล็บสองวง ()
*/
/*
การเรียกฟังก์ชันหลายครั้ง
ฟังก์ชันสามารถถูกเรียกใช้หลายครั้งได้
*/
func myMessage() { //ประกาศฟังก์ชัน func ชื่อ myMessage()
	f.Println("เรียกใช้งานฉันสิ") //พิมข้อความออกจอภาพ
}
func main() {
	myMessage() // เรียกใช้ฟังก์ชัน
	myMessage()
	myMessage()
}

/*ในโค้ดตัวอย่างนี้ ฟังก์ชัน myMessage() จะถูกเรียกใช้สามครั้ง และ
จะแสดงข้อความ "เรียกใช้งานฉันสิ" สามครั้ง
*/
/* อธิบายโค้ด
   func myMessage() {...} สร้างฟังก์ชัน myMeassage ที่พิมพ์ข้อความ
   func main() {...} ฟังก์ชันหลักที่เรียกใช้ฟังก์ชัน myMessage สามครั้ง
*/
/* กฎการตั้งชื่อสำหรับฟังก์ชันในภาษา Go
1.ชื่อฟังก์ชันต้องเริ่มต้นด้วยตัวอักษร
2.ชื่อฟังก์ชันสามารถประกอบด้วยตัวอักษรและตัวเลขเท่านั้น(A-z, 0-9, และ _)
3.ชื่อฟังก์ชันมีการแยกแยะตัวพิมพ์เล็กและตัวพิมพ์ใหญ่ (case-sensitive)
4.ถ้าชื่อฟังก์ชันประกอบด้วยหลายคำ สามารถใช้เทคนิคการตั้งชื่อแบบหลายคำสำหรับตัวแปรได้

Note
ตั้งชื่อฟังก์ชันให้สื่อถึงสิ่งที่ฟังก์ชันทำ
*/
