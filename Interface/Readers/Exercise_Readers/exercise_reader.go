package main

import (
	"golang.org/x/tour/reader"
) /* นำเข้าแพ็กเกจ golang.org/x/tor/reader
ซึ่งเป็นส่วนหนึ่งของทัวร์ Go เพื่อใช้งานฟังก์ชัน reader.Validate */
/*
	โค้ดนี้สร้างชนิดข้อมูลใหม่ MyReader ซึ่งเป็นการทำตามอินเตอร์เฟซ io.Reader โดย

มีการประกาศเมธอด Read เพื่อให้สามารถใช้งานกับฟังก์ชัน reader.Validate() ได้
ฟังก์ชัน reader.Validate() เป็นฟังก์ชันที่ใช้ตรวจสอบว่าชุดข้อมูลที่ส่งมามีการทำงาน
ตามที่กำหนดหรือไม่ ในกรณีนี้คือการอ่านข้อมูลและเขียนตัวอักษร A ลงในบัฟเฟอร์
*/
// ประกาศ struct ชื่อ MyReader ไม่ได้กำหนดฟิลด์
type MyReader struct{}

// การประกาศเมธอด Read สำหรับ MyReader
// เมธอด Read รับพารามิเตอร์เป็นสไลซ์ของไบต์ (b []byte)
func (r MyReader) Read(b []byte) (int, error) {
	//เมธอด Read ทำการเขียนตัวอักษร 'A' ลงในทุกตำแหน่งของสไลซ์ b
	for r := range b {
		b[r] = 'A'
	}
	// เมธอดคืนค่าจำนวนไบต์ที่ถูกเขียน (len(b)) และค่า error ที่เป็น nil
	return len(b), nil
}

// ฟังก์ชัน main
func main() {
	// เรียกใช้ฟังก์ชัน reader.Validate
	// เพื่อทดสอบว่า MyReader ทำงานตามที่กำหนดหรือไม่
	reader.Validate(MyReader{})
}

/* การทำงานของ MyReader.Read
1.การวนลูปผ่านสไลซ์ b
for r := range b {
	b[r] = 'A'
}
ใช้ลูป for เพื่อวนผ่านทุกตำแหน่งของสไลซ์ b
เขียนตัวอักษร 'A' ลงในตำแหน่งของสไลซ์ b

2.การคืนค่า
return len(b), nil
คืนค่าจำนวนไบต์ที่ถูกเขียนลงในสไลซ์ b ซึ่งคือ len(b)
คืนค่า error ที่เป็น nil หมายความว่าไม่มีข้อผิดพลาดเกิดขึ้น
*/
/* ฟังก์ชัน reader.Validate
ฟังก์ชัน reader.Validate ตรวจสอบว่าอินเตอร์เฟซ io.Reader ที่ถูกส่งเข้าไปนั้นทำงาน
ตามที่กำหนดหรือไม่ ในกรณีนี้คือการตรวจสอบว่าเมธอด Read ของ MyReader สามารถเขียน
ตัวอักษร 'A' ลงในบัฟเฟอร์ได้อย่างถูกต้อง
*/
/* ผลลัพธ์ที่ได้
เมื่อรันโปรแกรม ฟังก์ชัน reader.Validate จะตรวจสอบการทำงานของ MyReader โดย
อ่านค่าจากมันและตรวจสอบว่าข้อมูลที่อ่านได้เป็นตัวอักษร 'A' ทั้งหมด
*/
/* สรุป
โค้ดนี้ประกาศชนิดข้อมูล MyReader และเมธอด Read เขียนตัวอักษร 'A' ลงในตำแหน่ง
ของสไลซ์ไบต์ที่รับเข้ามา และฟังก์ชัน reader.Validate ถูกใช้เพื่อทดสอบการทำงาน
ของ MyReader ให้แน่ใจว่ามีการเขียนตัวอักษร 'A' ลงในบัฟเฟอร์อย่างถูกต้อง
*/
