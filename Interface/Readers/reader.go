package main

import (
	f "fmt"
	"io"
	"strings"
)

/*
	โค้ดนี้แสดงตัวอย่างการใช้งาน io.Reader

ซึ่งเป็น interface ที่ใช้ในภาษา Go เพื่อจัดการ การอ่านข้อมูล
จากแหล่งข้อมูลต่างๆ เช่น ไฟล์, การเชื่อมต่อเครือข่าย, และอื่นๆ
โค้ดนี้ใช้ strings.Reader ซึ่งเป็นการใช้งาน io.Reader ที่จัด
การกับสตริงในรูปแบบที่สามารถอ่านได้
*/
func main() {
	// สร้าง instance ของ strings.Reader
	// ซึ่ง implement io.Reader
	r := strings.NewReader("Hello, Reader!")
	// สร้าง slice ของ bytes ขนาด 8
	b := make([]byte, 8)
	// ใช้ลูปเพื่ออ่านข้อมูลจาก r ทีละ 8 bytes
	for {
		// อ่านข้อมูลจาก r ลงใน slice ชื่อตัวแปร b
		n, err := r.Read(b)

		// พิมพ์จำนวน bytes ที่อ่านได้, ข้อผิดพลาด, และ
		// slice ชื่อตัวแปร b
		f.Printf("n = %v err = %v b = %v\n", n, err, b)
		// พิมพ์ข้อมูลที่อ่านได้จาก slice ชื่อตัวแปร b ในช่วงที่มีข้อมูลจริง
		f.Printf("b[:n] = %q\n", b[:n])
		// ถ้าข้อผิดพลาดเป็น io.EOF หมายความว่าข้อมูลอ่านเสร็จสิ้น
		if err == io.EOF {
			break
		}
	}
}

/* อธิบายโค้ด
*1.นำเข้าแพ็กเกจ io สำหรับการทำงานกับ io.Reader และข้อผิดพลาดที่เกี่ยวข้อง
นำเข้าแพ็กเกจ strings สำหรับการใช้งาน srings.Reader ซึ่งเป็นการอ่านข้อมูลจากสตริง

*2.r := strings.NewReader("Hello, Reader!"): สร้าง strings.Reader
ซึ่ง implement ชื่อ io.Reader จากสตริง "Hello, Reader!"
strings.NewReader คืนค่าการอ้างอิงของ strings.Reader
ที่สามารถอ่านข้อมูลจากสตริงนี้

*3.b := make([]byte, 8): สร้าง slice ของ byte ขนาด 8
เพื่อใช้ในการเก็บข้อมูลที่อ่านออกมาจาก strings.Reader

*4.for{...}: เริ่มลูปที่ไม่สิ้นสุดเพื่ออ่านข้อมูลจาก r จนกว่าจะถึงจุดสิ้นสุดของข้อมูล

*5.n, err := r.Read(b): เรียกใช้เมธอดชื่อ Read ของ strings.Reader
	- n คือจำนวน bytes ที่ถูกอ่านและบันทึกใน slice ชื่อตัวแปร b
	- err คือข้อผิดพลาดที่เกิดขึ้นระหว่างการอ่าน ซึ่งอาจเป็น io.EOF เมื่อถึงจุดสิ้นสุด

*6.fmt.Printf("n = %v err = %v b = %v\n", n, err, b): พิมพ์จำนวน bytes
ที่อ่านได้ (n) ข้อผิดพลาด (err) และเนื้อหาของ slice ชื่อตัวแปร b

*7.fmt.Printf("b[:n] = %q\n, b[:n]"): พิมพ์ข้อมูลที่อ่านได้จาก slice ชื่อตัวแปร b
ตั้งแต่ต้นจนถึงตำแหน่ง n,  %q ใช้ในการพิมพ์ข้อมูลในรูปแบบของข้อความที่อ่านได้

*8.if err == io.EOF { break } : ตรวจสอบว่าข้อผิดพลาดคือ io.EOF
ซึ่งหมายความว่าไม่มีข้อมูลเพิ่มเติมให้อ่าน หากเป็นจริง ออกจากลูป

*/
/* สรุป
io.Reader: เป็น interface ที่ใช้ในการอ่านข้อมููลในรูปแบบสตรีม
strings.Reader: เป็นการ implement ของ io.Reader ที่ใช้สตริงเป็นแหล่งข้อมูล
Read: Method ของ io.Reader ที่อ่านข้อมูลจากแหล่งข้อมูลลงใน slice และคืนค่า
จำนวน bytes ที่อ่านได้พร้อมกับข้อผิดพลาด
io.EOF: ข้อผิดพลาดที่บ่งบอกว่าการอ่านข้อมูลถึงจุดสิ้นสุดแล้ว
โค้ดนี้แสดงวิธีการอ่านข้อมูลจากสตริงทีละ 8 bytes และการตรวจสอบว่าการอ่านข้อมูล
เสร็จสิ้นแล้วหรือยัง
*/
