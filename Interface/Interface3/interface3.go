package main

import (
	"fmt"
	"math"
)

/* ภายใต้การทำงาน อินเทอร์เฟซสามารถคิดเป็นคู่ของค่าและ
ประเภทที่เป็นรูปธรรม
(value, type)
อินเทอร์เฟซเก็บค่าของประเภทที่เป็นรูปธรรมเฉพาะ
การเรียกเมธอด บนอินเทอร์เฟซจะทำการเรียกเมธอดที่มีชื่อเดียวกัน
บนประเภทที่เป็นรูปธรรมของมัน
*/
/* โค้ดนี้เป็นตัวอย่างการใช้งานอินเตอร์เฟซ (interface)
ในภาษา Go ซึ่งแสดงให้เห็นว่าชนิดข้อมูลต่างๆ
สามารถ implement อินเตอร์เฟซเดียวกันได้ และสามารถใช้
ฟังก์ชัน describe เพื่อแสดงรายละเอียดของตัวแปรที่เป็น
ชนิดอินเตอร์เฟซ
*/

/* นำเข้าแพ็กเกจ math สำหรับค่าคงที่ทางคณิตศาสตร์
เช่น math.Pi */

// ประกาศอินเตอร์เฟซ I
/* อินเตอร์เฟซ I ประกาศเมธอด M ซึ่งไม่มีพารามิเตอร์
และไม่มีค่าที่คืนกลับ */
type I interface {
	M()
}

/* การประกาศชนิดข้อมูล T
และการ implement อินเตอร์เฟซ I */
// ประกาศสตรัคชื่อ T กำหนดฟิลด์หนึ่งตัวชื่อ S ชนิด string
type T struct {
	S string
}

/* เมธอด M ของ pointer ไปยัง T (*T)
พิมพ์ค่า S ออกทางหน้าจอ */
/* ประกาศฟังก์ชัน M() กำหนดพารามิเตอร์ตัวรับค่าชนิดข้อมูล
ของสตรัค T ชื่อตัวแปร t */
func (t *T) M() {
	/* ประกาศฟังก์ชัน Println() เรียกใช้พารามิเตอรตัวรับค่าชื่อ t ที่มี
	ชนิดข้อมูลของสตรัค T และกำหนดการเข้าถึงฟิลด์ของ
	สตรัค T โดยเขียน t.S */
	fmt.Println(t.S) // พิมพ์ผลลัพธ์ออกจอภาพ
}

/*การประกาศชนิดข้อมูล F และการ implement
อินเตอร์เฟซ I */
// ประกาศชนิดข้อมูลชื่อตัวแปร F ชนิด float64
type F float64

/*
	ประกาศพารามิเตอร์ตัวรับค่าชื่อ f ชนิดข้อมูล F

เรียกใช้ฟังก์ชัน M() เป็นเมธอดของชนิด F
*/
func (f F) M() {
	// เมธอด M() พิมพ์ค่าของ f ออกจอภาพ
	fmt.Println(f) //พิมพ์ผลลัพธ์ออกจอ
}

// F เป็นชนิดข้อมูลใหม่ที่มีพื้นฐานมาจาก float64
// เมธอด M ของ F พิมพ์ค่าของตัวเองออกทางหน้าจอ

// ประกาศตัวแปร i ชนิดอินเตอร์เฟซของ I
var i I

func main() {
	/* ประกาศตัวแปร i
	กำหนดชนิดข้อมูลชี้ไปที่ตัวแปรของสตรัคชื่อ T
	กำหนดอากิวเมนต์ Hello */
	i = &T{"Hello"}
	// เรียกใช้ฟังก์ชัน describer เรียกใช้ตัวแปร i
	describe(i)
	/* ประกาศตัวแปร i.M()
	กำหนดเข้าถึงข้อมูลของฟังก์ชันเมธอด M() */
	i.M()

	/* ประกาศตัวแปร i กำหนดชนิดข้อมูล F()
	และกำหนดเรียกใช้แพ็กเกจ math.Pi */
	i = F(math.Pi)
	// เรียกใช้ฟังก์ชัน describe เรียกใช้ตัวแปร i
	describe(i)
	/* ประกาศตัวแปร i.M()
	กำหนดเข้าถึงข้อมูลของฟังก์ชันเมธอด M() */
	i.M()
}

/*
	ประกาศฟังก์ชันชื่อ describe กำหนดพารามิเตอร์ตัวแปร i

กำหนดชนิดข้อมูลอินเตอร์เฟซของ I
*/
func describe(i I) {
	/* ประกาศฟังก์ชัน Printf() กำหนดค่าพิมพ์ชนิดตัวแปร i
	พิมพ์ค่าเริ่มต้นตัวแปร i และเรียกใช้ตัวแปร i */
	fmt.Printf("(%v, %T)\n", i, i) // พิมพ์ผลลัพธ์ออกจอภาพ
}

/*1.ผลลัพธ์ของฟังก์ชันของสตรัค T struct
(&{Hello}, *main.T)
Hello
2.ผลลัพธ์ของชนิดข้อมูลไหม่ F float64
(3.141592653589793, main.F)
3.141592653589793
*/

/* Note:
Pointer Receiver
ใช้สัญลักษณ์ * เปลี่ยนแปลงค่าของตัวรับ
Value Receiver
ใช้สำหรับไม่ต้องการเปลี่ยนแปลงค่าตัวรับ
ไม่มีสัญลักษณ์ ไม่มีเครื่อง Go จะตีความหมายเอง
*/
