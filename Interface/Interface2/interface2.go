package main

import (
	f "fmt"
)

/* ประเภทจะใช้งานอินเทอร์เฟซโดยการใช้งานเมธอดของมัน
โดยไม่ต้องประกาศเจตนาอย่างชัดเจน ไม่มีคีย์เวิร์ด "implements"
อินเทอร์เฟซแบบปริยายทำให้การกำหนดอินเทอร์เฟซ
แยกจากการใช้งานได้ ซึ่งสามารถปรากฏในแพ็กเกจใดๆ
โดยไม่ต้องจัดเตรียมล่วงหน้า
*/
/* การใช้ interface และ method ในภาษา Go ซึ่งเป็น
สิ่งสำคัญในการจัดการและออกแบบโครงสร้างของโปรแกรมใน Go
*/
// ประกาศอินเตอร์เฟซชื่อ I กำหนดฟิลด์หนึ่งตัวฟังก์ชันเมธอดชื่อ M()
type I interface {
	M()
}

// กำหนด struct ชื่อ T ซึ่งมีฟิลด์ s ชนิดข้อมูล String
type T struct {
	S string
}

// ประกาศฟังก์ชัน M() เป็นเมธอดของสตรัค T ซึ่งทำให้สตรัค T ใช้อินเตอร์เฟซ i
// ประกาศเมธอดฟังก์ชัน M() ที่ทำงานกับตัวรับ receiver ชื่อ t ชนิดสตรัค T
func (t T) M() {
	// ฟังก์ชันนี้พิมพ์ค่าของฟิลด์ S ของสตรัค T
	f.Println(t.S)
}

func main() {
	// สร้าง instance ของสตรัค T โดยกำหนดค่าให้กับฟิลด์ S เป็น "Hello"
	// สร้างตัวแปร i ชนิดอินเตอร์เฟซของ I และกำหนดให้เป็น instance ของสตรัค T
	// การทำเช่นนี้ทำให้ i สามารถเรียกใช้เมธอดฟังก์ชัน M() ของสตรัค T ผ่านอินเตอร์เฟซ i
	var i I = T{"Hello"}

	// เรียกใช้เมธอดฟังก์ชัน M() ผ่านตัวแปร i ซึ่งเป็นอินเตอร์เฟซ I
	// ผลลัพธ์จะพิมพ์ค่าของฟิลด์ S ชนิดข้อมูล string ซึ่งกำหนดข้อความ "Hello"
	i.M()
}

/* สรุป
interface: กำหนดชุดของเมธอด ที่ชนิดข้อมูลต้อง implement
Method: ฟังก์ชันที่มี receiver ซึ่งสามารถทำงานกับข้อมูลของชนิดที่กำหนด
implementation: ใน Go การ implement interface ไม่ต้องประกาศอย่างชัดเจน
เพียงแค่ชนิดข้อมูลมีเมธอดที่ตรงตามที่อินเตอร์เฟซกำหนด
ก็ถือว่า implement interface นั้นแล้ว
โค้ดนี้แสดงให้เห็นการใช้ interface และ method ใน Go เพื่อสร้างโครงสร้างที่ยืดหยุ่น
และสามารถจัดการกับชนิดข้อมูลต่างๆ ได้อย่างมีประสิทธิภาพ
*/
