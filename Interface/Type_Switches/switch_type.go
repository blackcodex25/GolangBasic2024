package main

import (
	f "fmt"
)

/* การทำ type switch คือ
การทำ type assertion จำนวนมากพร้อมๆกัน
type switch มีความคล้ายกับ switch ปกติ เพียงแค่ว่าในแต่
ละเคส จะใช้การระบุ type ลงไปตรงๆ เลย(ใม่ใช่ค่า)
เพื่อค้นหาว่าใน interface นั้น ถือค่าอะไรอยู่
*/
/* ตัวอย่าง
switch v := i.(type){
case T:
	v มีประเภท T
case S:
	v มีประเภท S
default:
	ไม่มีการจับคู่ v มีประเภทเดียวกับ i
}
รูปแบบการทำ type switch
การประกาศในสวิตซ์ประเภทมีไวยากรณ์เดียวกันกับการยืนยันประเภท
i.(T) แต่ประเภทเฉพาะ T ถูกแทนที่ด้วยคีย์เวิร์ด type
คำสั่งสวิตซ์นี้ทดสอบว่าค่าอินเตอร์เฟซ i มีค่าของประเภท T หรือ
S หรือไม่ ในแต่ละกรณีของ T และ S ตัวแปร v จะมีประเภท T
หรือ S ตามลำดับและถือค่าที่ถถือโดย i ในกรณีค่าเริ่มต้น
(ที่ไม่มีการจับคู่) ตัวแปร v จะมีประเภทและค่าของอินเทอร์เฟซ
เดียวกับ i
*/
/* โค้ดนี้แสดงการใช้งานชนิดข้อมูล interface{} และ type
switch ในภาษา Go เพื่อแยกการทำงานตามชนิดข้อมูลจริงของ
ตัวแปรที่ถูกส่งเข้ามาในฟังก์ชัน do
*/
func do(i interface{}) {
	// ทำงานของโปรแกรม
	/* ฟังก์ชัน do ใช้ type switch เพื่อตรวจสอบชนิดข้อมูลของ
	   พารามิเตอร์ i ที่เป็ฯชนิด interface{}
	   และทำงานตามชนิดข้อมูลที่ตรวจสอบได้
	*/
	/* type swich ใช้เพื่อแยกการทำงานตามชนิดข้อมูลจริง i
	ตัวแปร v จะมีชนิดข้อมูลตามชนิดจริงของ i ภายในแต่ละกรณี ()
	*/
	switch v := i.(type) {
	// กรณีที่ i เป็น int
	case int:
		//ถ้า i เป็นชนิด int ให้พิพม์ข้อความ คูณด้วยสอง <value> เป็น <value*2>
		f.Printf("ค่าเริ่มต้น %v คูณด้วยสอง = %v\n", v, v*2)
	// กรณีที่ i เป็น string
	case string:
		// ถ้า i เป็นชนิด string ให้พิมพ์ข้อความ <value> เป็น <length> bytes long
		// *%q ใช้เพื่อพิมพ์ค่า string พร้อมเครื่องหมายคำพูด
		// *len(v) คืนค่าความยาวของสตริงในหน่วยไบต์
		f.Printf("%q เป็น %v bytes long\n", v, len(v))
	// กรณีค่าอื่นๆ (default case)
	default:
		// ถ้าชนิดของ i ไม่ตรงกับกรณีใดๆ ให้พิมพ์ข้อความ "ฉันไม่รู้เกี่ยวกับประเภท <type>!"
		f.Printf("ฉันไม่รู้เกี่ยวกับประเภท %T\n", v)
	}
}

func main() {
	// เรียกใช้ฟังก์ชัน do กับค่าที่มีชนิดข้อมูลต่างกัน

	/*  1.เรียกใช้ do() กำหนดค่า 21
	เรียกใช้ฟังก์ชัน do โดยส่งค่า 21 ซึ่งเป็นชนิด int
	Type switch จะตรวจสอบว่า 21 เป็น int และพิมพ์ข้อความ คูณด้วยสอง 21 เป็น 42
	*/
	do(21)

	/* 2.เรียกใช้ do() กำหนดข้อความ hello
	เรียกใช้ฟังก์ชัน do โดยส่งค่า hello ซึ่งเป็นชนิด string
	Type switch จะตรวจสอบว่า hello เป็น string และพิมพ์ข้อความ
	hello เป็น 5 bytes long
	*/
	do("hello")

	/* 3.เรียกใช้ do() กำหนดค่า true
	เรียกใช้ฟังก์ชัน do โดยส่งค่า true ซึ่งเป็นชนิด bool
	Type switch จะไม่พบกรณีที่ตรงกับ bool จึงไปที่กรณี default
	และพิมพ์ข้อความ ฉันไม่รู้เกีี่ยวกับประเภท bool
	*/
	do(true)
}

/* สรุป
โค้ดนี้แสดงการใช้งาน type switch ในภาษา Go เพื่อจัดการกับชนิดข้อมูลที่แตกต่างกัน
ที่ถูกส่งเข้ามาในฟังก์ชัน do โดย type switch จะช่วยให้เราสามารถทำงานต่างๆ ได้
ตามชนิดข้อมูลจริงของตัวแปร และจัดการกับกรณีที่ไม่รู้จักชนิดข้อมูลโดยใช้กรณี default
*/
