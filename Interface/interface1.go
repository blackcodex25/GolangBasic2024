package main

import (
	"fmt"
	"math"
)

/* ประเภทอินเตอร์เฟซถูกกำหนดเป็นชุดของลายเซ็นเมธอด
ค่าของประเภทอินเทอร์เฟซสามารถเก็บค่า
ที่มีการนำเมธอดเหล่านั้นมาใช้ได้ทุกค่า
หมายเหตุ: มีข้อผิดพลาดในโค้ดตัวอย่างที่บรรทัดที่ 22 เนื่องจาก
Vertex (ประเภทค่า) ไม่ได้ใช้งาน Abser
เพราะเมธอด Abs ถูกกำหนดเฉพาะบน *Vertex
(ประเภทพอยน์เตอร์) เท่านั้น
*/
// นำเข้าแพ็กเกจ math สำหรับการคำนวณทางคณิตศาสตร์
// การประกาศอินเตอร์เฟซ Abser
// ประกาศอินเตอร์เฟซ Abser ที่มีเมธอด Abs ซึ่งคืนค่าผลลัพธ์เป็น float64
type Abser interface {
	Abs() float64
}

// การประกาศชนิดข้อมูล MyFloat
/* เมธอด Abs ถูกดำเนินการ (implement)
สำหรับ MyFloat โดยคำนวณค่าสัมบูรณ์ (absolute value) */
// ประกาศชนิดข้อมูล MyFloat ที่เป็นชนิดข้อมูลใหม่จาก float64
type MyFloat float64

// ประกาศฟังก์ชันเมธอด MyFloat ชื่อ f เรียกใช้ฟังก์ชันเมธอด Abs() ชนิดคืนค่า float64
func (f MyFloat) Abs() float64 {
	// ตรวจสอบเงื่อนไข f น้อยกว่า 0 หรือไม่
	if f < 0 {
		return float64(-f) // ถ้าใช่ ส่งคืนค่าลบ f ชนิด float64
	}
	return float64(f) // ถ้า f มีมากกว่า 0 ส่งคืนค่า f ชนิด float64
}

// การประกาศ struct ชื่อ Vertex กำหนดฟิลด์สองตัว x และ y ชนิดข้อมูล float64
/* เมธอด Abs ถูก implement สำหรับ pointer
ไปยัง Vertex (*Vertex)
โดยคำนวณค่าความยาวของเวกเตอร์ */
type Vertex struct {
	X, Y float64
}

// ประกาศเมธอดชื่อ Abs กำหนดพารามิเตอร์ชื่อ v ชนิด Vertex คืนค่าชนิด float64
func (v *Vertex) Abs() float64 {
	/* ประกาศฟังก์ชัน return คืนค่าแพ็กเกจ math.Sqrt
	กำหนดค่าฟิลด์ v.X คูณ v.X บวก v.Y คูณ v.Y */
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
}

// ประกาศตัวแปร a ที่เป็นชนิดอินเตอร์เฟซ Abser
var a Abser

func main() {
	// ประกาศและกำหนดค่าให้กับ f และ v
	// f เป็นตัวแปรชนิด MyFLoat ที่มีค่า -math.Sqrt2
	/* v เป็นตัวแปรชนิด Vertex ที่มีค่า x เป็น 3
	และ Y เป็น 4 */
	// ประกาศตัวแปร f ชนิดข้อมูลใหม่ MyFloat กำหนดค่า -math.Sqrt2
	f := MyFloat(-math.Sqrt2)
	// ประกาศตัวแปร v ชนิดสตรัค Vertex กำหนดอากิวเมนต์ 3 และ 4
	v := Vertex{3, 4}
	// กำหนดค่าให้กับ a
	/* ตัวแปร f (ชนิด MyFloat) implement
	อินเตอร์เฟซ Abser เพราะมีเมธอด Abs */
	// ประกาศตัวแปร a กำหนดค่าตัวแปร f ที่มีชนิดข้อมูลใหม่ MyFloat
	a = f
	/*Pointer ชื่อตัวแปร v (ชนิด *Vertex) implement
	อินเตอร์เฟซ Abser เพราะมีเมธอด Abs*/
	// ประกาศตัวแปร a กำหนดค่าตัวแปร v ชนิดสตรัค Vertex โดยใช้ pointer สัญลักษณ์ & ชี้ไปยังสตรัค Vertex
	a = &v // *แก้ข้อผิดพลาดบรรทัดที่ 78
	/* ตัวแปร v (ชนิด Vertex) ไม่ได้ implement
	อินเตอร์เฟซ Abser จึงจะเกิดข้อผิดพลาดในการคอมไพล์
	*/
	// *การประกาศตัวแปร a และกำหนดค่าโดย จะทำให้เกิดข้อผิดพลาดในการคอมไพล์
	a = v // ข้อผิดพลาด บรรทัดนี้จะไม่สามารถคอมไพล์ได้
	// เรียกใช้เมธอด Abs() บนอินเตอร์เฟซชื่อตัวแปร a ที่รับชนิดข้อมูลใหม่ Myfloat ชื่อตัวแปร f และรับชนิดสตรัค Vertex ชื่อตัวแปร v
	fmt.Println(a.Abs()) // ประกาศตัวแปร a เรียกใช้ฟังก์ชันเมธอด Abs() พิมพ์ผลลัพธ์เมธอด Abs() ออกจอภาพ โดยใช้จุด . ในการเรียกใช้ฟังก์ชัน
}

/* v เป็นชนิด Vertex ซึ่งไม่ได้ implement
อินเตอร์เฟซ Abser
เมธอด Abs ถูกประกาศไว้สำหรับ pointer ไปยัง Vertex
(*Vertex) ไม่ใช่ Vertex โดยตรง
*/
/* สรุป
โค้ดนี้แสดงการใช้งานอินเตอร์เฟซ Abser และการ implement
เมธอด Abs ในชนิดข้อมูลต่างๆ แต่จะเกิดข้อผิดพลาดในการคอมมไพล์เนื่องจากมีการกำหนด
ค่าให้กับตัวแปร a ด้วย v ที่เป็น Vertex โดยตรงซึ่งไม่ได้
implement อินเตอร์เฟซ Abser

*/
