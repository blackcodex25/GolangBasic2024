package main

import (
	"fmt"
)

/* การยืนยันประเภท (type assertion)
ให้การเข้าถึงค่าที่เป็นรูปธรรมของค่าอินเตอร์เฟซ

t := i.(T)
คำสั่งนี้ยืนยันว่าค่าอินเทอร์เฟซ i มีประเภทที่เป็นรูปธรรม T และ
กำหนดค่าที่เป็นรูปธรรมของ T ให้กับตัวแปร t

หาก i ไม่ได้มีค่า T คำสั่งนี้จะทำให้เกิด panic
ในการทดสอบว่าค่าอินเทอร์เฟซมีประเภทเฉพาะหรือไม่ การยืนยัน
ประเภทสามารถคืนค่าสองค่า: ค่าที่เป็นรูปธรรมและค่าบูลีนที่รายงาน
ว่าการยืนยันสำเร็จหรือไม่

t, ok := i.(T)
หาก i มีค่า T แล้ว t จะเป็นค่าที่เป็นรูปธรรมและ ok จะเป็น true
หากไม่เป็นเช่นนั้น ok จะเป็น false และ t จะเป็นค่าเริ่มต้นของ
ประเภท T และจะไม่เกิด panic
โปรดสังเกตความคล้ายคลึงระหว่างไวยากรณ์นี้และการอ่านค่าจาก map
*/
// *1.ประกาศและกำหนค่าให้กับตัวแปร i
/* ตัวแปร i ถูกประกาศเป็นชนิด interface{}
และกำหนดค่าเป็น hello ซึ่งเป็นชนิด string */
var i interface{} = "hello"

func main() {
	// *2.การใช้ type assertion เพื่อแปลง i เป็น string
	// ใช้ type assertion เพื่อแปลงค่าของ i ให้เป็น string
	// ค่าของ s คือ "hello"
	// พิมพ์ค่า hello
	/* ประกาศตัวแปร s ชนิดข้อมูลอินเตอร์เฟซของ i
	และกำหนดชนิดของอินเตอร์เฟซ i เป็น string */
	s := i.(string)
	// ประกาศฟังก์ชัน Println() ขึ้นบรรทัดใหม่ เรียกใช้ตัวแปร s แสดงผลข้อความออกจอภาพ
	fmt.Println(s) // พิมพ์ผลลัพธ์ของตัวแปร s คือ hello

	// *3.การใช้ type assertion พร้อมการตรวจสอบข้อผิดพลาด
	// ใช้ type assertion พร้อมการตรวจสอบข้อผิดพลาด
	// s จะเก็บค่า hello และ ok จะเก็บค่า true
	s, ok := i.(string) // ประกาศตัวแปรสองตัว s จะเก็บค่าของอินเตอร์เฟซ i ซึ่งคือ hello และ ok ชนิด bool ตรวจสอบข้อผิดพลาดของอินเตอร์เฟซ i
	fmt.Println(s, ok)  // พิมพ์ค่า hello และ true ออกจอภาพ

	// *4.การใช้ type assertion เพื่อแปลง i เป็น float64 พร้อมการตรวจสอบข้อผิดพลาด
	// ใช้ type assertion เพื่อแปลงค่าของ i ให้เป็น float64 พร้อมการตรวจสอบข้อผิดพลาด
	// เนื่องจาก i ไม่ใช่ float64, f จะมีค่าเป็นค่าเริ่มต้นของ float64 ซึ่งคือ 0.0 และ ok จะมีค่า false
	f, ok := i.(float64) // ประกาศตัวแปรสองตัว f เก็บค่า float64 ของอินเตอร์เฟซ i และ ok ชนิด bool ตรวจสอบข้อผิดพลาดของอินเตอร์เฟซ i
	fmt.Println(f, ok)   // พิมพ์ค่า 0 และ false ออกจอภาพ

	// *5.การใช้ type assertion เพื่อแปลง i เป็น float64 โดยไม่ตรวจสอบข้อผิดพลาด
	// ใช้ type assertion เพื่อแปลงค่าของ i ให้เป็น float64 โดยไม่ตรวจสอบข้อผิดพลาด
	// เนื่องจาก i ไม่ใช่ float64 จะเกิด panic และโปรแกรมจะหยุดทำงาน
	// ประกาศตัวแปร f กำหนดชนิด float64 ชนิดข้อมูลของอินเตอร์เฟซ i
	f = i.(float64) // โปรแกรมหยุดทำงานที่บรรทัด 57
	// panic: interface conversion: interface{} is string, not float64
	fmt.Println(f) // พิมพ์ค่าตัวแปร f ออกจอภาพ

}

/* โค้ดนี้แสดงการใช้งาน type assertion ในภาษา Go
เพื่อแปลงค่าที่เก็บในตัวแปร interface{} ให้เป็นชนิดข้อมูลที่ต้องการ โดยมีการตรวจสอบ
ข้อผิดพลาดและการไม่ตรวจสอบข้อผิดพลาด การไม่ตรวจสอบข้อผิดพลาดจะทำให้เกิด panic
ถ้าการแปลงไม่สำเร็จ ดังนั้นควรใช้การตรวจสอบข้อผิดพลาดเมื่อทำการแปลงค่าจาก interface{}
เพื่อให้โปรแกรมทำงานได้อย่างปลอดภัย
*/
