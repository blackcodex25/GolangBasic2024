package main

import (
	f "fmt"
)

/* หนึ่งในอินเทอร์เฟซที่พบได้บ่อยที่สุดคือ Stringer
ซึ่งกำหนด โดยแพ็กเกจ fmt

ตัวอย่างการประกาศ
type Stringer interface{
	String() string
}
Stringer คือประเภทที่สามารถอธิบายตัวเองเป็นสตริง แพ็กเกจ
fmt (และแพ็กเกจอื่นๆ อีกมากมั้ย)
จะมองหาอินเทอร์เฟซนี้เพื่อพิมพ์ค่า
*/
/* โค้ดนี้แสดงการใช้งาน struct ในภาษา Go
พร้อมกับการเพิ่มเมธอด String สำหรับ struct ชื่อ Person
เพื่อกำหนดรูปแบบการแสดงผลของ struct
เมื่อพิมพ์ออกทางหน้าจอด้วยฟังก์ชัน fmt.Println()
*/
/* ประกาศ struct ชื่อ Person ที่มี
ฟิลด์ Name ชนิด string และฟิลด์ Age ชนิด int */
type Person struct {
	Name string
	Age  int
}

// ประกาศเมธอด String() สำหรับ struct ชื่อ Person พร้อมตัวรับค่า p คืนค่าชนิด string
func (p Person) String() string {
	// เมธอดนี้จะคืนค่า string ที่เป็นผลลัพธ์จากการเรียกใช้ fmt.Sprintf
	// เมธอดนี้จะกำหนดรูปแบบการแสดงผลของ struct ชื่อ Person ให้เป็น <Name> (<Age> ปี)
	return f.Sprintf("%v (%v ปี)", p.Name, p.Age)
} /* Note: fmt.Sprtinf() ใช้สำหรับสร้างสตริงตามรูปแบบที่กำหนด
%v แทนค่าของฟิลด์ Name
%v แทนค่าของฟิลด์ Age
*/
func main() {
	// ประกาศตัวแปร a และ z เป็นชนิด Person และกำหนดค่าอากิวเมนต์ทั้งสองตัว
	// ตัวแปร a กำหนด name เป็น Arthur Dent และ Age เป็น 42
	// ตัวแปร z กำหนด name เป็น Zaphod Beeblebrox และ Age เป็น 9001
	a := Person{Name: "Arthur Dent", Age: 42}
	z := Person{Name: "Zaphod Beeblebrox", Age: 9001}
	// ประกาศฟังก์ชัน Println() เพื่อพิมพ์ค่าของตัวแปร a และ z
	f.Println(a, z)
	/* เนื่องจาก struct ชื่อ Person มีเมธอด String ที่
	กำหนดรูปแบบการแสดงผล string
	เมื่อถูกพิมพ์ค่าที่พิมพ์ออกมาจะเป็น Arthur Dent (42 ปี)
	และ Zaphod Beeblebrox (9001 ปี)
	*/
}

/*
*สรุปข้อแตกต่าง Sprintf() กับ Printf()
1. Sprintf()
คืนค่าสตริงที่ถูกจัดรูปแบบตามที่กำหนด
ไม่พิมพ์ข้อความออกทางมาตรฐาน (Standard output)
ใช้เมื่อเราต้องการเก็บข้อความที่จัดรูปแบบไว้ในตัวแปรเพื่อนำไปใช้ต่อ

ตัวอย่าง การเอาไปใช้ต่อ ซึ่ง Printf() ไม่สามารถทำได้
message := Sprintf("%v (%v)", name, age)
f.Println(message)

2. Printf()
พิมพ์ข้อความที่ถูกจัดรูปแบบออกทางมาตรฐาน (standard output)
ไม่คืนค่าสตริง
ใช้เมื่อเราต้องการพิมพ์ข้อความที่จัดรูปแบบโดยตรงไปยังมาตรฐาน
(เช่น แสดงผลออกหน้าจอ)

ตัวอย่าง พิมพ์ข้อความที่จัดรูปแบบโดยตรง
f.Printf("%v (%v)", name, age)

*/
/*โครงสร้างของโปรแกรม
1.การนำเข้าแพ็กเกจ
2.การประกาศ struct ชื่อ Person
3.การประกาศเมธอด String สำหรับ Person
4.ฟังก์ชันหลัก main
*/
/* สรุป
โค้ดนี้แสดงการประกาศ struct ชื่อ Person ในภาษา Go และเพิ่มเมธอด String
เพื่อกำหนดรูปแบบการแสดงผลของ struct เมื่อถูกพิมพ์ออกทางหน้าจอด้วย Println()
เมธอด String ช่วยให้เราสามารถกำหนดรูปแบบการแสดงผลของ struct ได้เอง
ตามที่ต้องการ โดยในตัวอย่างนี้ เมธอด <Name> (<Age> ปี)
ซึ่งทำให้ struct ชื่อ Person แสดงผลในรูปแบบที่อ่านง่ายและชัดเจน
*/
