package main

import (
	f "fmt"
)

/*  ในภาษา Go เราสามารถสร้างชนิดข้อมูลแบบ Generic ได้
ซึ่งหมายความว่าเราสามารถพารามิเตอร์ไทป์ (Type Parameter)
เพื่อกำหนดชนิดข้อมูลในขณะที่ใช้งานได้
สิ่งนี้เป็นประโยชน์ในการสร้างโครงสร้างข้อมูลทั่วไปที่สามารถใช้งาน
กับหลายชนิดข้อมูลได้
*/
/* ตัวอย่าง
ตัวอย่างนี้แสดงการประกาศชนิดข้อมูลสำหรับลิงก์ลิสต์ (Singly-Linked List)
ที่สามารถเก็บค่าได้ทุกชนิด
*/
// List แทนค่าลิงก์ลิสต์แบบเดี่ยว (singly-Linked list)
// ที่เก็บค่าได้ทุกชนิด
type List[T any] struct {
	next *List[T] // พอยน์เตอร์ไปยังโหนดถัดไปในลิสต์
	val  T        // ค่าที่เก็บในโหนดปัจจุบัน
}

/* ชนิดข้อมูล List ถูกพารามิเตอร์ไทป์ด้วย T ซึ่งสามารถเป็น
ชนิดข้อมูลใดก็ได้ (any)
แต่ละโหนด (Node) ของลิสต์มีฟิลด์ next ซึ่งเป็นพอยน์เตอร์
ไปยังโหนดถัดไป และฟิลด์ val ที่เก็บค่าของชนิด T
*/

/* การเพิ่มฟังก์ชันการทำงานให้ลิสต์
เราสามารถเพิ่มฟังก์ชันการทำงานต่างๆ ให้กับลิสต์ เช่น การเพิ่ม
โหนด การค้นหา การพิมพ์ค่าของโหนดในลิสต์
*/

// การเพิ่มโหนดในลิสต์
// ฟังก์ชัน Add ใช้สำหรับเพิ่มค่าใหม่ไปยังท้ายลิสต์
func (list *List[T]) Add(value T) {
	// กำหนดตัวแปร current ให้ชี้ไปที่โหนดแรกของลิสต์
	current := list // เริ่มจากโหนดแรกของลิสต์
	// ลูปผ่านลิสต์จนกว่าจะถึงโหนดสุดท้าย
	for current.next != nil {
		current = current.next // เลื่อนตัวแปร current ไปยังโหนดถัดไป
	}
	// เพิ่มโหนดใหม่ที่มีค่า value ไปยังท้ายลิสต์
	/* สร้างโหนดใหม่ที่มีค่า value
	และกำหนดให้เป็นโหนดถัดไปของโหนดสุดท้าย */
	current.next = &List[T]{val: value}
}

// ฟังก์ชัน Print() ใช้สำหรับพิมพ์ค่าของโหนดทั้งหมดในลิส
func (list *List[T]) Print() {
	// กำหนดตัวแปร current ให้ชี้ไปที่โหนดแรกของลิสต์
	current := list
	// ลูปผ่านโหนดทั้งหมดในลิสต์
	/* ใช้ลูปเพื่อวนผ่านโหนดทั้งหมดในลิสต์จนกว่าจะถึงโหนด
	สุดท้าย (ที่ current เป็น nil)
	*/
	for current != nil {
		/* ในแต่ละรอบของลูป พิมพ์ค่าของโหนดปัจจุบัน
		(current.val)
		*/
		// พิมพ์ค่าของโหนดปัจจุบัน
		f.Println(current.val)

		/* เลื่อนตัวแปร current ไปยังโหนดถัดไป
		(current.next)
		*/
		// เลื่อนไปยังโหนดถัดไป
		current = current.next
	}
}

func main() {
	// สร้างลิสต์ของ int
	/* สร้างลิสต์ที่เก็บค่า int โดยเริ่มต้นด้วยค่า 1
	เพิ่มค่า 2 และ 3 ไปยังท้ายลิสต์
	พิมพ์ค่าทั้งหมดในลิสต์ 1, 2, 3
	*/
	intList := &List[int]{val: 1}
	intList.Add(2)
	intList.Add(3)
	intList.Print()

	// สร้างลิสต์ของ string
	/* สร้างลิสต์ที่เก็บค่า string โดยเริ่มต้นด้วยค่า a
	เพิ่มค่า b และ c ไปยังท้ายลิสต์
	พิมพ์ค่าทั้งหมดในลิสต์ a, b, c
	*/
	stringList := &List[string]{val: "a"}
	stringList.Add("b")
	stringList.Add("c")
	stringList.Print()
}

/* โค้ดนี้แสดงการใช้งาน Generics
ในภาษา Go เพื่อสร้างลิงก์ลิสต์ (Singly-Linked List)
ที่สามารถเก็บค่าได้ทุกชนิดข้อมูล โดยการเพิ่มฟังก์ชันการทำงาน
เช่นการเพิ่มโหนดและการพิมพ์ค่าของโหนดในลิสต์
เราสามาถใช้งานลิสต์นี้กับชนิดข้อมูลต่างๆ
ได้อย่างยืดหยุ่นและสะดวก
*/
