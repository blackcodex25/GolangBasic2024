package main

import (
	f "fmt"
	"math"
)

/* มีสองเหตุผลในการใช้ตัวรับแบบพอยน์เตอร์
เหตุผลแรกคือเพื่อให้เมธอดสามารถแก้ไขค่าที่ตัวรับชี้ไปได้

เหตุผลที่สองคือเพื่อหลีกเลี่ยงการคัดลอกค่าทุกครั้งที่เรียกใช้เมธอด
ซึ่งสามารถทำให้มีประสิทธิภาพมากขึ้นหากตัวรับเป็นโครงสร้างขนาดใหญ่

ในตัวอย่างนี้ ทั้ง Scale และ Abs เป็นเมธอดที่มีประเภทตัวรับเป็น *Vertex
ถึงแม้ว่าเมธอด Abs จะไม่จำเป็นต้องแก้ไขตัวรับก็ตาม
โดยทั่วไป เมธอดทั้งหมดของประเภทที่กำหนดควรมีตัวรับเป็นค่าหรือตัวรับแบบพอยน์เตอร์
แต่ไม่ควรผสมกัน
*/
// นำเข้าแพ็กเกจ math สำหรับการคำนวณทางคณิตศาสตร์
// ประกาศ struct ชื่อ Vertex ที่มีฟิลด์ X และ Y ซึ่งเป็นชนิด float64
type Vertex struct {
	X, Y float64
}

/*
	ประกาศเมธอดชื่อ Scale ใช้ pointer receiver ( *Vertex )

เพื่อให้สามารถเปลี่ยนแปลงค่าของฟิลด์ x และ y ของ struct ชื่อ Vertex ได้
เมธอดนี้คูณค่า x และ y ด้วยค่า f ที่รับเข้ามาเป็นพารามิเตอร์
*/
func (v *Vertex) Scale(f float64) {
	v.X = v.X * f
	v.Y = v.Y * f
}

// การประกาศเมธอด Abs
/* เมธอด Abs ใช้ pointer receiver (*Vertex) เพื่อคำนวณและคืนค่าความยาว
ของเวกเตอร์ โดยใช้สูตร Sqrt(x^2 + Y^2)
*/
func (v *Vertex) Abs() float64 {
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
}

func main() {
	// ประกาศพอยน์เตอร์ชื่อ v ที่ชี้ไปยัง Vertex ที่มีค่าเริ่มต้น X เป็น 3 และ Y เป็น 4
	v := &Vertex{3, 4}
	/*v.X = 6
	v.Y = 7*/
	// พิมพ์ค่า v และผลลัพธ์ของเมธอด Abs ก่อนการปรับขนาด
	f.Printf("ก่อนจะปรับขนาด: %+v, Abs: %v\n", v, v.Abs())
	// เรียกใช้เมธอดชื่อ Scale บน v โดยคูณค่า X และ Y ด้วย 5
	v.Scale(5)
	// พิมพ์ค่า v และผลลัพธ์ของเมธอด Abs หลังการปรับขนาด
	f.Printf("หลังจากปรับขนาดแล้ว: %+v, Abs: %v\n", v, v.Abs())
} /* Note: %+v ใช้สำหรับการพิมพ์ค่าโครงสร้าง (struct)
โดยแสดงชื่อฟิลด์และค่าของฟิลด์ใน Struct นั้นๆ ด้วยเครื่องหมาย %+v ทำให้ผลลัพธ์
ที่พิมพ์ออกมามีความชัดเจนและอ่านง่ายมากขึ้น
การใช้งาน %+v ในการพิมพ์ค่า struct ด้วยเครื่องหมาย %+v
จะทำให้เห็นชื่อฟิลด์ของ struct และค่าของฟิลด์เหล่านั้นด้วย
*/

/*การทำงานของโปรแกรม
1.การสร้าง Pointer ชื่อตัวแปร v
v := &Vertex{3,4}: สร้าง pointer ชื่อ v ที่ชี้ไปยัง Vertex
ที่มีค่าเริ่มต้น x เป็น 3 และ y เป็น 4

2.การพิมพ์ค่า v และผลลัพธ์ของเมธอด Abs ก่อนการปรับขนาด
fmt.Printf("Before Scaling: %+v, Abs: %v\n", v, v.Abs())
v.Abs() : เรียกใช้เมธอด Abs เพื่อคำนวณค่าความยาวของเวกเตอร์
sqrt(3^2 + 4^2) = 5
พิมพ์ค่า v และผลลัพธ์ของเมธอด Abs ผลลัพธ์ที่ได้คือ
ก่อนปรับขนาด: &{X:3 Y:4}, Abs: 5

3.การเรีียกใช้เมธอด Scale บน v
v.Scale(5): เมธอด Scale ถูกเรียกใช้โดยการคูณค่า x และ y ของ v ด้วย 5
ค่า v เปลี่ยนจาก Vertex{3,4} เป็น Vertex{15, 20}

4.การพิมพ์ค่า v และผลลัพธ์ของเมธอด Abs หลังการปรับขนาด
fmt.Printf("After scaling: %+v, Abs: %v\n", v, v.Abs())
v.Abs(): เรียกใช้เมธอด Abs เพื่อคำนวณค่าความยาวของเวกเตอร์
sqrt(15^2 + 20^2) = sqrt(225 + 400) = sqrt(625) = 25
พิมพ์ค่า v และผลลัพธ์ของเมธอด Abs
ผลลัพธ์ที่ได้คือ
After scaling: &{x:15 Y:20}, Abs: 25
*/
/* สรุป
โปรแกรมนี้มีหน้าที่ในการ
1. สร้างตัวแปร Vertex และกำหนดค่าเริ่มต้น
2. คำนวณและพิมพ์ค่าความยาวของเวกเตอร์ก่อนและหลังการปรับ
3. ปรับขนาดเวกเตอร์โดยใช้เมธอด Scale
4. คำนวณและพิมพ์ค่าความยาวของเวกเตอร์หลังการปรับขนาด

เมธอด Scale ใช้ pointer receiver เพื่อเปลี่ยนแปลงค่าของ struct ชื่อ Vertex
และเมธอด Abs ใช้ pointer receiver เพื่อหลีกเลี่ยงการคัดลอกค่าของ struct ชื่อ Vertex
ในการคำนาณค่าความยาวของเวกเตอร์
*/
