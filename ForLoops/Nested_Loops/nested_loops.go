package main

import (
	f "fmt"
)

/* Nested Loops
ในภาษา Go เราสามารถวางลูปไว้ภายในลูปอีกลูปหนึ่งได้
ซึ่งจะเรียกว่า "ลูปซ้อน" (nested loops)
เมื่อมีลูปซ้อน ลูป "ภายใน" (inner loop) จะถูกดำเนินการหนึ่งครั้งสำหรับ
การวนซ้ำแต่ละครั้งของลูป "ภายนอก" (outer loop)
*/
/*ในตัวอย่างนี้ เรามีอาร์เรย์สองตัว adj และ fruits และเราจะใช้ลูปซ้อนเพื่อ
พิมพ์ค่าทุกคู่ที่เป็นไปได้ของสองอาร์เรย์นี้
*/
func main() {
	adj := [2]string{"big", "tasty"}                 //ประกาศ array ชื่อ adj ชนิดข้อมูล string
	fruits := [3]string{"apple", "orange", "banana"} // ประกาศ array ชื่อ fruits ชนิดข้อมูล string
	for i := 0; i < len(adj); i++ {                  //
		for j := 0; j < len(fruits); j++ {
			f.Println(adj[i], fruits[j])
		}
	}
}

/*อธิบายโค้ด
อาร์เรย์ adj มีสองค่า คือ "big" และ "tasty"
อาร์เรย์ fruits มีสามค่า คือ "apple", "orange", และ "banana"
ลูปภายนอก (for i := 0; i < len(adj); i++) จะวนซ้ำครั้งละหนึ่งครั้ง
สำหรับแต่ละค่าใน adj
ลูปภายใน (for j := 0; j < len(fruits); j++) จะวนซ้ำครั้งละหนึ่งครั้ง
สำหรับแต่ละค่าใน fruits
*/
/*สรุป
ลูปซ้อนจะดำเนินการลูปภายในหนึ่งครั้งสำหรับการวนซ้ำแต่ละครั้งของลูปภายนอก
ในโค้ดตัวอย่างนี้ ลูปภายในพิมพ์ค่าทุกคู่ที่เป็นไปได้ของสอง อาร์เรย์ adj และ fruits
*/
/*Syntax for statement1; statement2; statement3{
	โค้ดที่จะถูกเรียกใช้ในแต่ละรอบของการวนลูป
 }
	statement1 ใช้ในการกำหนดค่าเริ่มต้นให้กับตัวนับลูป
	statement2 จะถูกประเมินในแต่ละรอบของการวนลูป ถ้าผลลัพธ์เป็น TRUE
	ลูปจะดำเนินการต่อไป ถ้าผลลัพธ์เป็น false ลูปจะสิ้นสุด
	statement3 ใช้ในการเพิ่มค่าตัวนับลูป
// Note: คำสั่งเหล่านี้ไม่จำเป็นต้องอยู่ในอาร์กิวเมนต์ของลูปแต่อาจต้องมีอยู่ในโค้ด
ในบางรูปแบบ
*/
