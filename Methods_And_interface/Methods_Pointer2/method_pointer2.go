package main

import (
	f "fmt"
	"math"
)

// *การคำนวณและปรับขนาดของเวกเตอร์ในระบบคาร์ทิเซียน (Cartesian Coordinates)
// นำเข้าแพ็กเกจ math ใช้สำหรับการคำนวณทางคณิตศาสตร์ เช่น ฟังก์ชัน Sqrt ที่ใช้ในการหาค่ารากที่สอง
/*
	ประกาศชนิดข้อมูลใหม่ที่ชื่อ Vertex ซึ่งเป็นโครงสร้างข้อมูล (Struct)
ที่มีสองฟิลด์คือ X และ Y ทั้งสองฟิลด์เป็นชนิดข้อมูล float64
*/
type Vertex struct {
	X, Y float64
}

// ฟังก์ชัน Abs สำหรับคำนวณค่าความยาวของเวกเตอร์
/*
	ประกาศฟังก์ชันชื่อตัวแปร Abs รับพารามิเตอร์ v ซึ่งเป็นชนิด Vertex และ
คืนค่าผลลัพธ์เป็น float64
*/
func Abs(v Vertex) float64 {
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
} /* ภายในฟังก์ชันมีการคำนวณค่าความยาวของเวกเตอร์ โดยใช้สูตรคณิตศาสตร์
คือการหาค่ารากที่สองของผลรวมของกำลังสองของ X และ Y
*/

// ฟังก์ชัน Scale สำหรับปรับขนาดของเวกเตอร์
func Scale(v *Vertex, f float64) {
	// ปรับขนาดเวกเตอร์โดยคูณพิกัด x และ Y ด้วยค่า f
	v.X = v.X * f
	v.Y = v.Y * f
} /* ฟังก์ชัน Scale รับพารามิเตอร์ v ที่เป็น pointer ไปยัง Vertex (*Vertex) และค่า f ซึ่งเป็น float64
สามารถเปลี่ยนแปลงค่าของพิกัด X และ Y ของ Vertex ที่ถูกส่งเข้ามาได้
*/
func main() {
	v := Vertex{3, 4} // ประกาศตัวแปร v เป็น Vertex ที่มีค่าเริ่มต้น x = 3 และ Y = 4
	Scale(&v, 10)     // เรียกใช้ฟังก์ชัน Scale โดยส่ง pointer ของ v
	f.Println(Abs(v)) // เรียกใช้ฟังก์ชัน Abs เพื่อคำนวณและพิมพ์ค่าความยาวของเวกเตอร์ที่ถูกปรับขนาดแล้ว
}

/* ตัวอย่างผลลัพธ์เมื่อรันโปรแกรม
1.สร้างตัวแปร v ที่มีค่าเริ่มต้น Vertex{3,4}

2.เรียกใช้ฟังก์ชัน Scale(&v, 10)
- v.X จะเปลี่ยนจาก 3 เป็น 30 (3*10)
- v.Y จะเปลี่ยนจาก 4 เป็น 40 (4*10)

3.เรียกใช้ฟังก์ชัน Abs(v)
- คำนวณค่าความยาวของเวกเตอร์ sqrt(30^2 + 40^2) ซึ่งเท่ากับ 50

4.ผลลัพธ์ที่ได้คือ 50 ซึ่งจะถูกพิมพ์ออกมาทางหน้าจอ
*/

/* สรุป
โปรแกรมนี้มีหน้าที่ในการ
- สร้างและจัดการกับเวกเตอร์ในระบบพิกัดคาร์ทิเซียน
- คำนวณความยาวของเวกเตอร์
- ปรับขนาดของเวกเตอร์โดยการคูณพิกัด X และ Y ด้วยค่าที่กำหนด
โค้ดนี้แสดงให้เห็นถึงการใช้งานฟังก์ชันและการจัดการกับ pointer ในภาษา Go
เพื่อให้สามารถปรับเปลี่ยนค่าของโครงสร้างข้อมูลได้อย่างมีประสิทธิภาพ
*/

/* Note: ไม่เกี่ยวกับโค้ดตัวอย่างนี้
func SluggifyAll[T any](s []T) []string {
	...
  }
  ส่วนของค่า T ที่ปรากฎเรียกว่า Type Parameters เป็นส่วนนิยามคุณสมบัติของชนิดข้อมูลที่เป็นไปได้ทั้งหมด (constraints) Type Paramers
  จะถูกกำหนดในส่วนของ Type Paramerter List ที่อยู่ในขอบเขตของ [ และ ] หลังชื่อฟังก์ชัน จากตัวอย่างของฟังก์ชัน SluggifyAll
  เรากล่าวได้ว่า ส่วนของ Type Paramerter List คือ [T any] โดยมีค่า T เป็น Type Parameter ที่กำหนด constraint เป็น any ในความหมายที่ว่า T เข้าคู่กับชนิดข้อมูลใดก็ได้
  เมื่อ T ถูกกำหนดความสัมพันธ์เป็น any ส่วนของพารามิเตอร์ s ที่อ้างอิงถึง T แบบ []T จึงหมายถึงพารามิเตอร์นี้รับชนิดข้อมูลใดก็ได้ขอเพียงแค่เป็น slice โดยไม่สนใจว่าจะเป็น slice ของชนิดข้อมูลใด
*/
