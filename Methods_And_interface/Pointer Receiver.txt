การเปรียบเทียบระหว่างการใช้ฟังก์ชันที่รับ pointer เป็นพารามิเตอร์และเมธอด
ที่ใช้ pointer receiver ในภาษา Go
การเปรียบเทียบฟังก์ชันกับเมธอดใน Go

1.ฟังก์ชันที่รับ pointer เป็นพารามิเตอร์
ฟังก์ชันที่รับ pointer เป็นพารามิเตอร์จำเป็นต้องส่ง pointer ให้กับ
ฟังก์ชันเท่านั้น ไม่สามารถส่งค่าโดยตรงได้ หากพยายามจะส่งค่า
โดยตรงจะทำให้เกิดข้อผิดพลาดในการคอมไพล์
ตัวอย่าง
var v Vertex
ScaleFunc(v, 5) Compile error! ไม่ได้ใช้เครื่องหมาย & ชี้ค่าให้ตัวแปร v
ScaleFunc(&v, 5) ok!

2.เมธอดที่ใช้ pointer receiver
เมธอดที่ใช้ pointer receiver สามารถเรียกได้ทั้งจากค่า(value) 
และ pointer ของชนิดนั้นๆ เมื่อเรียกเมธอดจากค่าจะทำให้ Go
ตีความเป็น pointer receiver โดยอัตโนมัติ
ตัวอย่าง
var v Vertex
v.Scale(5) ok!
p := &v
p.Scale(10) ok!

เหตุผลที่ทำให้เมธอดสามารถรับทั้งค่าและ pointer
ในภาษา Go หากเมธอดมี pointer receiver และถูกเรียกใช้โดยค่า(value)
ตัวแปรภาษา Go จะทำการแปลงค่าดังกล่าวให้เป็น pointer โดยอัตโนมัติ
เพื่อให้สามารถเรียกใช้เมธอดได้อย่างสะดวก
ตัวอย่าง
var v Vertex
v.Scale(5) Go ตีความเป็น (&v).Scale(5)
