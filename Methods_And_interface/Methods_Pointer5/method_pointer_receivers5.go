package main

import (
	f "fmt"
	"math"
)

/*ฟังก์ชันและเมธอดในภาษา Go
เมื่อเรามีฟังก์ชันที่รับค่าเป็นพารามิเตอร์และเมธอดที่ใช้ value receiver
*/
/* 1.ฟังก์ชันที่รับค่าเป็นพารามิเตอร์
ฟังก์ชันที่รับค่าเป็นพารามิเตอร์จำเป็นต้องรับค่าของชนิดที่ระบุเท่านั้น
ไม่สามารถรับ pointer ของชนิดนั้นได้ หากพยายามจะส่ง pointer
จะทำให้เกิดข้อผิดพลาดในการคอมไพล์

   2.เมธอดที่ใช้ value receiver
เมธอดที่ใช้ value receiver สามารถเรียกได้
ทั้งจากค่า (value) และ pointer ของชนิดนั้นๆ
เมื่อเรียกเมธอดจาก pointer จะทำให้ Go
ตีความเป็นการเรียกเมธอดจากค่าอัตโนมัติ
*/
// ประกาศฟังก์ชันสตรัคชื่อ Vertex กำหนดฟิลด์สองตัว x และ y ชนิด float64
type Vertex struct {
	X, Y float64
}

// *การประกาศตัวรับ Receiver ในกรณีนี้คือ v Vertex ซึ่งหมายความว่าเมธอดนี้ทำงานบนตัวแปรชนิด Vertex
// ฟังก์ชัน AbsFunc รับพารามิเตอร์เป็นค่า Vertex
// ประกาศฟังก์ชัน AbsFunc กำหนดพารามิเตอร์ชื่อ v ชนิดค่าสตรัค Vertex กำหนดชนิดคืนค่า float64
func AbsFunc(v Vertex) float64 {
	// ใช้งานพารามิเตอร์ชื่อ v อิงค่าสตรัค Vertex
	// ประกาศฟังก์ชัน return คืนค่าแพ็กเกจ math.Sqrt กำหนดค่าฟิลด์ v.X คูณ v.X บวก v.Y คูณ v.Y
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
}

// เมธอด Abs รับพารามิเตอร์เป็นค่า Vertex
// ประกาศเมธอดชื่อ Abs() กำหนดตัวรับพารามิเตอร์ชื่อ v ชนิดฟังก์ชันสตรัคชื่อ Vertex กำหนดชนิดข้อมูลคืนค่า float64
func (v Vertex) Abs() float64 {
	// ประกาศฟังก์ชัน return คืนค่าแพ็กเกจ math.Sqrt กำหนดค่าฟิลด์ v.X คูณ v.X  บวก v.Y คูณ v.Y กำหนดชนิดข้อมูลคืนค่า float64
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
}

func main() {
	v := Vertex{3, 4}
	// เมธอดเรียกใช้ Value Receiver
	// การเรียกใช้เมธอด Abs บนตัวแปร v
	// เมธอด Abs จะถูกเรียกใช้กับตัวแปร v ซึ่งเป็นชนิดข้อมูลของสตรัคชื่อ Vertex เพื่อคำนวณและคืนค่าความยาว
	// ของเวกเตอร์จากพิกัด x และ y
	f.Println(v.Abs()) //พิมพ์ผลลัพธ์ออกจอภาพ

	// ฟังก์ชันที่รับค่าเป็นพารามิเตอร์จำเป็นต้องรับค่าที่ระบุเท่านั้น
	// การเรียกใช้ฟังก์ชัน AbsFunc กำหนดตัวรับค่าชื่อตัวแปร v ชนิดข้อมูลสตรัค Vertex
	f.Println(AbsFunc(v)) // พิมพ์ผลลัพธ์ออกจอภาพ
	// fmt.Println(AbsFunc(&v)) compile error! (ไม่สามารถส่ง pointer เข้าไปได้)

	// ประกาศตัวแปรพอยเตอร์ชื่อตัวแปร p ที่ชี้ไปยัง Vertex{} กำหนดค่าอากิวเมนต์ของ x เป็น 4 และ y เป็น 3
	p := &Vertex{4, 3}
	/* เรียกใช้เมธอด Abs บนพอยเตอร์ชื่อตัวแปร p
	Go จะตีความเป็น (*p).Abs() โดยอัตโนมัติ
	คำนวณค่าความยาวของเวกเตอร์ใช้ฟังก์ชัน Sqrt(4^2 + 3^2) = 5
	*/
	f.Println(p.Abs())
	/*เรียกใช้ฟังก์ชัน AbsFunc โดย dereference pointer ชื่อตัวแปร p
	เพื่อส่งค่า Vertex{4,3} เข้าไป
	คำนวณค่าความยาวของเวกเตอร์ฟังก์ชันชื่อ Sqrt(4^2 + 3^2) = 5
	*/
	f.Println(AbsFunc(*p))

} /* Note: เมธอดที่ใช้ value receiver
Go จะตีความเป็นการเรียกเมธอดจากค่าอัตโนมัติ */

/*สรุป
โปรแกรมนี้แสดงให้เห็นถึงการใช้งานทั้งเมธอดและฟังก์ชันใน
การคำนวณค่าความยาวของเวกเตอร์ โดยมีการประกาศ struct
ชื่อ Vertex ที่มีฟิลด์ x และ y การประกาศเมธอด Abs ที่ใช้
คำนวณค่าความยาวของเวกเตอร์จากค่าพิกัด และการประกาศ
ฟังก์ชัน AbsFunc ที่ทำหน้าที่เดียวกัน
เมธอด Abs และฟังก์ชัน AbsFunc ถูกเรียกใช้ทั้งจากตัวแปร
ที่เป็นค่าและ pointer เพื่อแสดงความแตกต่างในการใช้งานและ
การตีความของ Go ในการจัดการกับ pointer receiver
*/
