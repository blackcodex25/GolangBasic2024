package main

import "fmt"

/* Stacking Defer คือ
การประกาศฟังก์ชันที่ถูกเลื่อนการทำงาน (deferred functions)
หลายฟังก์ชันในโปรแกรม Go โดยเมื่อโปรแกรมถึงจุดที่ต้องรันฟังก์ชันที่ถูกเลื่อนการทำงานเหล่านั้น
ฟังก์ชันจะทำงานในลำดับที่เรียกว่า LIFO (Last-In, First-Out) หรือ "เข้าหลังออกก่อน"
นั่นหมายความว่า ฟังก์ชันที่ถูกเลื่อนการทำงานเป็นตัวสุดท้ายจะถูกเรียกใช้ก่อน
และฟังก์ชันที่ถูกเลื่อนการทำงานเป็นตัวแรกจะถูกเรียกใช้หลังสุด
*/
// ตัวอย่างโค้ด Stacking Defer
func main() {
	// เลื่อนการทำงานและเก็บเข้า stack ซึ่งจะทำงานท้ายสุด
	defer fmt.Println("deferred call 1")
	defer fmt.Println("deferred call 2")
	defer fmt.Println("deferred call 3")

	fmt.Println("main function executed")
}

/* อธิบายการทำงาน
1.การประกาศ defer:
ฟังก์ชัน fmt.Println("deferred call 1"), fmt.Println("deferred call 2"), และ
fmt.Println("deferred call 3") ถูกเลื่อนการทำงานไว้ด้วยคำสั่ง defer

2.การทำงานของฟังก์ชัน defer:
เมื่อโปรแกรมจบการทำงานของ main ฟังก์ชัน defer
จะถูกเรียกใช้งานตามลำดับย้อนกลับ
ฟังก์ชันที่ถูกประกาศ defer เป็นตัวสุดท้าย (คือ fmt.Println("deferred call 3"))
จะทำงานเป็นตัวแรก
ส่วนฟังก์ชันที่ถูกประกาศ defer เป็นตัวแรก (fmt.Println("deferred call 1"))
จะทำงานเป็นตัวสุดท้าย
*/
/* ประโยชน์ของ Stacking Defer:
1.การทำงานกับทรัพยากรหลายๆ อย่าง:
Stacking Defer มีประโยชน์เมื่อมีการจัดการทรัพยากรหลายๆ อย่าง เช่น การเปิดไฟล์หลายๆ ไฟล์
การเชื่อมต่อฐานข้อมูลหลายรายการซึ่งต้องปิดหรือคืนค่าทรัพยากรเหล่านั้นตามลำดับที่ถูกเปิดใช้งาน

2.ความชัดเจนของโค้ด:
Stacking Defer ช่วยให้การจัดการทรัพยากรที่ต้องทำการ cleanup ดูเป็นระเบียบและเข้าใจง่าย
เนื่องจากทำงานตามลำดับการเรียกใช้
*/
